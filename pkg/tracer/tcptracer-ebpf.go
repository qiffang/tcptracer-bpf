// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x61\x6c\x5b\xd7\x75\xbe\x8f\x14\x2d\x4a\xae\x23\xa5\x29\x13\x99\x59\x56\x25\x75\x6a\x4d\xc8\x1c\xc9\x96\x65\x5a\x49\x3c\xc5\xa9\x13\x4d\xf3\x26\xc5\x35\x13\xce\x5b\x40\x33\x34\x65\xd1\x92\x6d\x5a\xa4\x6d\x51\x32\x3a\x39\x4d\x02\x43\x08\x06\xb9\xc9\x36\x21\x30\x02\x51\x56\x62\xb5\xe8\x06\xad\xe8\x6a\x0f\x33\x2a\xcf\x0b\x0a\xfd\x68\x01\x23\x4b\x0b\x21\xf3\x00\xfd\xc8\x0a\x2d\x08\x06\xad\x30\x3c\x2d\x30\xcc\x81\xf7\x7c\x8f\xef\xbd\xf3\xee\x7b\xa4\x6c\xb7\xfb\x51\x11\x48\xaf\xcf\xf7\xee\xb9\xe7\xde\x73\xcf\x3d\xf7\xbb\xf7\x3d\xf5\x2f\x76\xed\x7e\xde\xa3\x69\x42\xff\x69\xe2\x7f\x84\x21\x19\xbf\xb1\xb0\xf1\xef\x76\xfc\x6f\x83\xd0\xc4\xec\x83\x84\xbd\x21\x84\xb8\x4f\x08\x31\x5c\xbd\x94\x2f\xc8\xd9\x58\x4a\xe2\xc3\xc1\x65\x29\xcf\x4e\x52\xbd\x4a\x8f\x10\x4b\xf9\x7c\x7e\xf6\x3c\x64\xaf\x10\xcb\xf9\x7c\xbe\x8e\x19\xbd\x58\x61\xb4\xeb\x29\xc8\xc0\xff\x0a\x65\xf6\xa1\x6e\x66\xb7\x43\xda\xb9\x88\x76\x86\x83\xed\x36\xbb\x1d\x0a\x3b\x6f\xc8\x31\x0b\x11\x10\xf7\xc9\x27\xd9\x35\x84\x97\xa3\xe7\x15\x42\x1c\xac\x14\xa2\x5e\x08\x71\x12\x65\xb8\xd2\xa7\x71\xfd\x76\x17\xbb\xb3\x95\x24\x07\x2a\x6f\xd3\xb8\x8e\x41\xd6\x6e\x91\x9c\xc3\xb8\x3c\x18\x57\x63\x13\xf9\x37\x8d\x7a\xde\x17\x65\x3f\xc2\xde\x9b\xb2\xbd\xec\x80\x5f\xe2\xaf\x7c\xf9\x06\xf9\xb1\x0a\x7a\xef\x2e\xe6\xa9\x5c\x40\x39\x8f\xf2\x1a\xca\x39\x94\x57\x50\x5e\x42\x39\x83\x72\x1a\xe5\x04\xca\x71\x94\x63\x28\xcf\xa0\x1c\x41\x39\x58\xec\xb7\x47\xf6\xbb\x97\xf0\x60\x8a\xfa\x7f\xac\x16\xf3\x44\xf5\xb2\x03\x75\x18\x5f\x03\xd5\x6b\x1c\x01\x5e\x0f\xbc\x1e\x38\xd9\xc9\xa6\x1a\x08\xaf\x26\xfb\xd9\xe3\x4d\x24\xef\xa3\x7e\x65\x33\x21\xf2\xdf\x20\x45\xeb\xf0\x28\xfa\xdf\x49\xfd\xcf\x0e\x76\xd0\xf3\x81\x6e\xb4\x8f\xf1\x8e\xce\x58\xfc\x10\x1b\xc8\xc8\xe7\xf1\xc6\xeb\x90\x07\x21\x93\x1f\x93\x03\xa7\xa4\xdc\xd7\xf8\x29\xe4\x6f\x41\xfe\x25\xea\xa7\x50\x7f\x1e\xcf\x47\xf0\x7c\x11\xcf\x0f\x48\xf9\xa0\x87\xe2\x27\x96\xdd\x2f\xe5\xae\xef\xd0\xbc\xc5\xb2\xbd\x54\xa6\xfb\xa9\x9e\x97\xea\x75\xbd\x8d\x79\x6d\xc3\xfc\x35\xd2\xfc\x25\xb4\x98\xf4\x77\x40\x3b\x85\x38\xfa\x0e\xc5\xb7\xa6\x49\xdc\x27\xfe\x9e\xe2\x02\xf1\xd8\x17\xdc\x23\xf5\x6a\xde\x24\x79\x36\x47\x65\xa5\x26\xc4\x9e\x7c\x3e\xaf\xcf\xdf\x6c\xdc\x88\xdb\xc2\xd2\x4c\xe6\x48\xaf\x2f\x48\xe3\xf0\x89\xf7\x30\xce\x48\x9e\xca\x5b\xf4\xbc\x71\x2f\xca\x9b\xe8\x67\x2f\x9e\x2f\x23\x0e\x68\xde\xf5\xf6\x6b\x1e\xb0\xf7\x23\x82\x7e\x54\x98\xec\x67\x8f\xd5\x97\xd4\xbb\xa5\xd4\x6b\x28\xa9\xb7\xd7\x34\x6e\x43\xaf\xa9\xa4\xde\x4d\xa5\x1e\xc5\x61\xcd\x83\xf6\xfa\xbd\xa8\xef\x57\xf8\x37\x7b\x8c\xe2\x36\x7b\x9e\xfc\xa5\xb2\xb7\xac\x18\x5f\x6c\x0a\xfe\xef\xa4\x3c\x11\x3b\x4f\xf3\x10\x6f\x6b\xa1\xf8\x9b\xd4\xe7\x23\x44\x72\xee\x26\xe6\xb1\x8d\xea\xbf\x4f\xf3\x12\xdf\xf7\xb4\x2c\x03\x15\x7d\x96\xb8\x3b\x89\x32\xe0\xa5\xb8\x7c\xd9\x23\x44\x3e\x2f\x44\xc0\xd3\x43\xb2\x06\x59\xa3\xb8\xd6\xf3\xd7\x70\xb0\x97\xe5\xe7\x41\x4b\x3e\x30\x8f\x2b\x85\x71\xd5\x62\x5c\xb5\x2c\x9f\x36\xb1\xfd\xa3\x57\x91\x5f\x7d\x62\x8f\x2c\x03\xda\x46\x99\x1f\x03\xda\x33\xd2\x3f\x85\x75\xe0\x93\xcf\x69\xdd\xeb\xfd\x89\x07\xf7\xa2\x3f\xe4\xbf\x9a\xe7\x9d\xe3\xd0\x7d\xbe\x22\x8e\xf3\xb5\x57\x31\x5f\x07\x05\xfc\x8a\xb2\x30\x8e\x5f\xe5\xf3\x79\x7d\x1c\xaf\xd4\x36\x17\xfb\xa9\xc9\xfe\x5d\xc1\x7a\x6b\x62\xfd\xa7\x79\xce\xe6\x28\x7f\xaa\xe2\xcd\xbc\x1e\x78\xff\x63\x39\xc4\x49\xf0\x3a\xda\xdf\x60\x69\xbf\x2f\x48\x71\x52\xb3\xc6\xde\xee\x4d\xd7\x3c\xa1\xc7\xd7\xa7\x68\x77\x3d\xeb\x37\xf2\x40\xae\xde\xb1\xdf\xcb\xae\xfd\x46\xbc\x06\x17\xd0\xfe\x3a\xd6\xef\x1e\x6a\xf7\x25\x7b\xbb\x3d\xae\xfd\xee\x41\xbf\x7f\x89\x76\x69\x03\x8e\xe5\xf6\xc2\xde\xbc\x8d\x5f\x94\x13\x97\xa5\x78\xcd\xff\x1b\x9f\xaa\xe3\x7c\xaa\x9b\xad\xd7\x0e\x9b\xdd\x6e\x37\x5e\x83\x38\x09\xac\xa1\x50\x2e\x47\xaf\xb0\x4e\xb3\x3d\xc2\x56\xdf\x8d\xb7\x19\xfc\xe9\x57\x34\x8e\x22\x7f\x5a\x22\x79\x92\x8f\xa3\x3e\x6f\xad\x17\x26\xfe\xa4\x7d\x46\xfc\xe9\x18\xf8\xd3\xa3\x8b\xc2\xaa\x07\xbe\x14\xc4\x7e\x1b\x04\x5f\xc2\x7a\x1c\x0e\x82\x3f\x04\xc1\x1f\x82\xe0\x1b\x41\xf0\xa5\x20\xf8\x52\x10\x7c\x29\x08\xbe\x14\x04\x5f\x62\xf9\xb0\x98\x2f\xbd\xe0\x4f\x6d\x11\xec\x9f\xfb\xc1\x8b\x88\x3f\x65\xd3\xe0\x4d\x6d\x29\xcb\xfe\x9a\x4d\xd3\xfe\x98\xcd\x80\x27\x75\xc2\x4e\x1b\xf8\x56\xba\x09\xcf\x43\x78\x8e\x7e\xb5\x81\x5f\xa5\x91\xcf\x32\x1d\x78\x8e\x71\xb4\x81\x5f\xa5\xc1\x9b\xda\xa6\x2d\xe3\x8e\x65\xc0\x97\x3a\x7f\x0a\x19\x7c\xa9\x93\xfc\x96\xcc\x80\x2f\x75\x7e\x0c\x19\x7c\xa9\xf3\x17\xa8\x0f\xbe\xd4\x39\x87\xe7\xe0\x4b\x9d\xf3\x78\x0e\x1e\x54\x01\xbe\x74\x9c\xf6\xa1\xae\xbd\x98\xa7\x4e\xf0\xb6\x0c\xf1\xa8\xd8\x71\xf0\x2b\x1f\x78\xd3\x2e\xd4\xdb\xa7\xcf\x57\x08\x25\xed\x97\x61\xcf\x77\x45\x21\x74\x67\x2f\x20\xfe\x2a\x85\xb8\x94\xcf\xe7\x6b\x5a\x11\x97\xa6\xfc\xd1\x64\xda\xa7\x6c\xfb\x41\x0e\xed\x3e\x44\xf1\x94\xcd\x35\x41\x46\x3b\xa6\xf8\xae\x67\xeb\x37\xa2\xdc\xcf\xde\xa1\x71\xf8\xb1\x5f\xa0\x0c\xfb\xdf\x66\x71\x0a\x3b\x88\xf3\xe1\xe0\x12\xca\x45\xe4\xb3\x2f\x50\x2e\x03\x5f\x40\x3e\xc3\xfe\x71\x8c\xe6\x95\xf3\x9c\x42\xbf\x6a\x1d\xc6\xef\xb7\xec\x83\xce\xfa\x75\x4c\xbf\x7e\x05\xfa\x66\xbd\xa5\x15\xda\xf5\x33\xfd\x45\xa5\x7e\x69\x5e\xf8\xc5\x1d\xf2\xc2\xe5\x15\xf2\xc2\x85\xb2\x78\xc6\x82\x23\xcf\x50\xf2\xde\xef\x22\x2e\xde\xa5\x3c\x92\xfd\x00\xf1\x71\x88\xf2\xc9\x6c\x8c\xf4\xbb\xce\x52\x99\xbd\x80\xb8\x19\x42\x3e\x99\xc6\xf9\x71\x94\xf2\x4c\x72\x0a\x71\xd4\x39\x08\x5e\xb9\x0c\x5e\x39\xc4\x78\xe7\x29\xe2\x91\xda\x0e\xea\xe7\x69\xd8\x29\xe6\xdf\xa7\x08\x7f\x96\x64\x83\x3f\x92\x7f\x66\x1f\xe5\xf8\x56\x29\x0f\x77\xfa\x91\x8f\x6a\x91\xf7\xea\x58\x9e\x6f\xb7\xac\xef\x6c\xae\xdb\xb2\xce\xcd\xfe\x0a\x29\xf8\x66\xb8\x8a\x36\x30\xdd\x2f\x07\x35\xac\x3b\x94\x75\x92\x0e\x18\x3c\xed\x91\x47\x69\x23\x0a\x57\xae\xb7\x8c\xb3\x94\xde\x2b\x8f\xd2\x04\x9e\x5c\x43\xcf\xe3\x87\x68\x5e\xf4\xf5\x1d\x1f\xdd\x80\xfe\xd3\x78\xaf\x6b\xd4\xbf\xbe\x60\x03\xf0\x3a\x86\x37\x02\xaf\xc5\xba\x7e\xc2\xb6\x6f\xf3\x7c\xd3\xa4\xcc\x37\x18\xbf\x49\x2f\x52\x86\xde\x4a\xf8\x8d\x5f\xf2\x8c\x10\x9b\x37\xca\xf3\xd9\x83\x94\xd7\xb3\xbd\x29\x5b\x3f\xe6\xdd\xf8\x00\xee\x3b\x02\x55\x8f\x90\x3e\xe2\x39\xac\x3d\x2c\xf7\xf9\xd9\x63\xea\x79\x29\x9c\x0b\x2a\x65\xbd\x07\x65\x3b\x3c\x8e\xfa\xb0\xbf\x95\x7b\xaf\x13\x00\x5f\xcc\xe2\x79\x40\x5b\x27\xed\xdf\xfb\x76\x47\xa9\x5d\xe6\xe7\xac\x46\xfb\xf6\xec\xb7\x49\x56\xe5\x89\x19\x45\x5e\x4a\xe6\xa8\x3f\x61\xed\xb3\xbc\xc7\xc2\xd3\x67\x10\x4f\x4b\xe8\xf7\x02\xca\x5b\x79\xf3\x78\xe2\xd8\x67\xb2\x67\xeb\xca\xb6\x6f\xc9\x53\x67\xeb\x4b\xea\x2d\x29\xf5\x1a\x4a\xea\x2d\xa8\xf2\xf0\xd9\xa6\x92\x7a\xb7\x94\x7a\xc8\xdf\x75\xf6\xfa\xed\xe6\xfc\xfd\x6d\x63\xfe\x48\x4f\xcf\xdf\xed\x8e\xf9\x7b\x51\x79\xae\x87\xff\x3b\xc7\x91\x5f\x97\x90\x5f\xcf\x21\xff\x62\x3e\x1a\x89\xa7\x25\x71\x9e\xeb\x0b\x4e\x52\xfd\xf7\x69\x5e\xe2\xfb\xa6\x28\x1f\x57\xfc\xa3\x2c\xed\xe7\xfa\x1f\x49\xdc\x38\xd7\xff\x90\xe4\x62\xfe\xfd\x01\xe9\xd9\xee\x3d\x69\xfd\xf8\xc4\x66\xc1\xe3\x79\xdc\x35\x9e\x89\x3f\x5e\x04\x8f\x1f\x1e\x02\x9f\x1e\x02\x3f\x1b\x9a\xb1\xe5\x6b\x3d\x6e\x24\x9f\xf0\x5a\xfd\xfb\x86\xec\x43\x21\xaf\x90\x7f\xb3\xe7\x43\xca\x71\x0e\xb7\x19\xf7\xc5\x9a\x8c\x5b\xda\x1f\x62\xb9\x1f\x22\x8e\xf7\x42\x1e\x87\xdc\x0b\xf9\x1c\xe4\x7e\xf8\x79\x82\xe5\x5f\xec\x8f\xb9\x49\x86\x0f\x40\x7f\x0a\xfa\x19\x2a\x87\x06\x51\x9e\x42\xde\xd6\xcf\x13\xe0\xf9\x39\x9d\xa7\xd2\xbe\x3d\x3b\x05\x3f\x54\x50\x9c\xe9\xfb\x53\x9d\xc7\xea\xdf\x8b\x3e\xba\xa7\x2f\xf8\x63\x7d\x99\xf3\xe1\x95\xbe\x3b\x41\x76\xef\x3a\x7f\x1c\xce\x57\x2b\xf7\xe3\xf1\x3b\xe3\xa5\x67\xbb\x95\xfd\x51\xf1\xd2\x76\x15\xbf\x73\xd1\xe7\xbc\x74\x7c\x05\xfa\x25\x79\xa9\x8b\xdd\xb2\x78\x69\x19\x79\x4d\xc9\x4b\xcb\xc8\x6b\x4a\x5e\xea\x92\xd7\x16\xca\xca\x6b\x2b\xe4\xa5\xb9\x76\xcb\xf9\x31\xfb\x3e\xe2\x03\xe7\xb3\xae\x80\x40\xbb\x88\x97\x36\x5a\x1f\xd9\x29\xf0\x51\xfd\x9c\x38\x89\xf8\x69\xc4\x39\x13\xf7\x42\x7d\xc1\x8f\x68\xdd\x4d\x80\x8f\x56\xd3\xb9\x33\xe0\x5b\x4f\xed\xb7\x50\xfb\x81\x8a\x87\x58\xde\x0b\xb0\xbc\xf7\x80\x43\xde\x5b\x23\xf3\x9e\x79\x7d\xcd\xb8\xae\xaf\x6a\xdb\x7e\xef\x54\x9f\xf2\x63\x05\xcb\x8f\x38\x6f\x0f\xe1\x3c\x3e\x34\x6e\xcb\x8f\xe3\xbf\xd6\xfc\x78\xce\x92\x1f\xb3\x58\xef\xd9\x49\xe4\xa9\x46\xeb\xfd\x85\x9e\xcf\xb2\x93\xb8\x2f\x69\xb4\xde\x77\x24\x73\xd7\x58\x9e\x3c\x03\xfc\x23\x86\x8f\xc2\xfe\xc7\xb0\xff\x16\xf2\xe6\x18\xca\x77\x60\x6f\x9a\xe5\xcf\x89\x3b\xce\x9f\x11\x53\xfe\xf4\x89\x7f\x21\x7d\xf0\x57\xce\x57\x8d\x7b\xb3\xa6\xa2\x2c\xd7\x89\x1f\xf1\x9b\x5c\x21\x8f\x2d\xde\x6b\x3d\x41\xfa\xe0\xad\x61\xad\x51\xc6\xd1\xf0\x21\xe2\xff\xb3\x78\x6f\x73\x11\x76\x86\x47\xc9\xcf\xf1\x51\xf2\x93\x7e\xce\x9c\xc5\xfb\x22\xd5\xba\x9c\x53\x9e\x87\xf5\xf5\x3c\xe7\xb8\x9e\x3f\x56\xac\xe7\xe1\x51\x8a\xa7\xbe\xd1\x09\x5b\x9c\x87\x56\xc4\x6b\x6b\x88\xaf\xf7\xc2\x7f\x1f\x34\xb0\x73\x02\xec\x04\xef\xd6\xce\x37\xdd\xf9\xb3\x8b\xdf\x26\x94\xfb\x1f\xfa\xc3\xfa\x1d\xd6\x16\x19\x9f\x1e\x2b\xc1\xa7\x43\x56\x3e\xad\xbf\x27\x73\xe9\xcf\x98\xdb\x7b\x32\x17\x3d\x25\x9f\xd6\xef\x43\x5c\xf4\x94\x7c\x5a\xbf\x0f\x71\xd1\x53\xf2\x69\xfd\x3e\x64\xbd\xbd\x7e\xc8\xbc\xef\xbc\x6d\xcc\xa7\x35\x4e\x43\x2b\xe4\xd3\xf0\x3f\xee\x35\x0d\x3e\x3d\xc5\xf8\xf4\x34\xe3\xd3\xdf\x63\x7c\xfa\xfb\xe0\xd3\xb4\x60\xed\x7c\x9a\x0e\xc4\xc6\xbe\x42\xf1\xa7\xef\x2b\x61\xed\x2a\xf5\xd7\x14\xbf\x85\xb8\xf2\x89\x7f\xb8\x27\x71\x18\xd6\xa6\x18\x0f\xd3\xef\x3b\xc7\xee\x8c\x87\xe9\xf7\x6c\xac\x3f\x2a\x1e\x16\x72\xbb\xa7\x53\xe8\x73\x1e\x36\xb6\x02\xfd\xb2\xef\x07\x15\x76\x57\x74\x3f\xe8\x62\xd7\xf5\x7e\xd0\x45\xcf\xf5\x7e\x50\xb1\x1e\x16\xca\x5a\x0f\x2b\xe4\x61\x53\x88\x0b\xfd\xfb\x88\xf3\xfa\xfb\x80\x69\xec\xdf\x88\x93\x46\xec\xf7\x39\xf0\x2f\xbc\xf7\x48\x4e\x20\x6e\xaa\x69\xbf\x4f\xe2\x3d\x72\xdf\xbe\xab\xb4\x5e\x2e\x80\x7f\x0d\x7d\x48\xf9\x71\x1b\xf5\xa7\xeb\x05\x2a\x03\x95\x7f\x46\xfd\xc4\xfd\x78\xd7\x46\x1d\x8f\xc8\xf2\x65\xdc\x9a\x05\x04\xbd\xc8\x7b\xd9\x07\xd9\x47\x17\xff\xe1\x0a\x9f\x2c\xf9\xfa\xab\x93\xcb\xcf\x74\x4f\xf7\x1c\xdd\x6b\x85\x3d\xc3\x54\xbf\xe4\xfd\xdc\x89\xa2\x7f\x7d\xa6\xfb\x2a\x7e\x0f\x3f\x3c\xda\x5e\xdc\x9f\xbc\x72\xbd\x74\xc0\x4f\xc4\x07\xf4\xf6\xe3\xc1\xdd\x6c\x1f\xc3\x7b\x1d\x9d\x5f\x4d\x52\x3e\x89\xe3\x3d\x4f\x6c\xf2\x32\xe4\x03\xc8\x4b\xe4\xdf\xeb\xb8\xaf\xec\xc3\xfb\x9e\xe4\xe4\x55\x86\x1f\x82\xfe\x87\xd0\xef\xc7\x3a\x4e\xa1\xcc\xd8\x78\x63\xb7\xe2\x1e\x34\x99\x3b\x84\xf6\x71\xfe\x3d\x4f\xfd\x88\x4d\xed\x47\xde\x23\x42\x34\x4b\xd7\xb2\xc5\xf7\x2c\x27\x51\x06\x7c\x5f\xa6\xe7\x8f\x0b\x36\x6f\x35\x84\x07\x38\xfe\x25\xc2\x4d\x3c\x2d\xe4\xc2\xd3\xf4\x73\x08\x3f\xef\x96\xea\x77\x1c\xef\xbb\xe2\x6d\xef\x30\xbf\x8d\x33\xde\xf9\x2e\x78\xa7\xee\xbf\x73\x36\xbe\x31\xe6\xca\xf7\x6f\xdc\xe6\xf5\x27\x5c\xeb\xff\xd7\xed\xdf\x6c\xbc\x4d\xb0\x78\x9b\x62\xf1\x36\xed\x10\x6f\xdf\x73\x88\xb7\xef\xdf\x55\xbc\xdd\xed\xbc\xfb\xc4\x4f\x7e\xa3\xfe\xcb\x4e\xea\xf9\x12\xe7\x8e\x36\x7c\xe7\xa6\xbf\xa7\x9d\x44\xbe\x3c\x8f\xf3\x11\xde\xbf\xea\xe7\x24\xfb\x7a\x1e\x71\x58\xcf\xaf\xb1\xf5\xfc\x3a\xfc\x7a\x06\xe5\x5b\xbf\x36\xff\x46\xa4\x2f\xff\x95\xfc\x50\xfc\x0e\x51\xe7\x07\xf0\xdb\x7a\xeb\xf7\x03\xfa\xfb\x7f\x7e\x0e\x0a\x54\xd1\x8b\x1e\xf3\x7a\x50\x7d\xaf\x60\x3f\x07\xb5\xc9\xd2\x38\x07\x85\xe8\x1c\xa4\xcf\x23\xda\xef\x1b\xc5\xf7\x26\xa3\x37\xc0\x57\x4a\xef\xbf\x37\x56\xb0\x6f\x57\xe2\x7d\x7c\xa9\xef\xbe\x86\x47\xc1\x0f\x47\xf1\xfd\x46\x19\xe7\x30\x35\xef\xd0\xf7\xf3\x45\xc7\xfd\x5c\xc5\xdf\x87\x47\xc7\xe0\x87\xee\xb2\xf3\x55\x79\xef\x2d\xd0\x6e\xf0\x6e\xdb\xfd\xc3\x3b\x3e\x77\xc9\xb8\xf6\xe3\xfd\x92\x8d\xf7\x76\x83\xf7\xfe\x67\xde\x63\xc9\x03\xf8\x4e\x14\xf7\x4d\x7c\xdf\xe7\xf7\x93\x71\x9c\x5f\x8d\xf3\x9a\xfb\x77\x1e\x31\xf0\xa3\x78\x23\xd6\x27\xbe\x0f\x89\x07\xe9\x3b\x08\xe3\xfd\xde\x14\xe2\xa1\xf4\x79\xee\x92\xcb\x79\x4e\xc5\x0b\x2f\x9b\xbf\x93\x62\xbc\xd0\xf8\x0e\x0b\xfc\x2c\x77\x83\xed\x73\x57\x6d\xf9\x63\x5a\x91\x3f\x62\xb8\x8f\x0e\x68\x73\xd8\x17\x2f\x2b\xfd\x19\xd0\x3e\x84\x1d\xb2\x67\xdc\xa3\xfd\x33\xf0\xab\x0c\xff\x31\xd9\x37\xe5\xa7\x42\x3c\xe9\xdf\x0f\xf2\xfc\xa4\xbf\x3f\xf1\x89\x37\xef\x71\xdc\xfc\xad\x3c\x2f\xdd\xbb\xb8\xb9\xb3\xef\x86\x8c\x78\xba\x8e\x38\xd2\xcf\x61\x9f\x3a\xc4\x53\xe9\x73\x91\xfa\x9e\xa7\xfc\x73\xd1\xb5\x15\xea\xf3\xf3\xe0\x25\x17\x7d\x3d\x9e\x2b\xab\xec\xe7\xc0\x2b\x2e\xe7\x1d\x23\xae\xe7\x1d\xe2\xfa\x93\xb2\xe2\xda\xb8\xa7\xa4\xf9\x08\x7b\xf0\xfe\x1b\xe3\x29\x7d\xae\xa8\x42\x5c\xd2\x3c\x67\xa7\x68\x9e\xc3\x15\x44\x8c\x9d\xf8\x31\x65\x01\xd3\x79\xc3\xf7\x64\x71\x7c\x14\x7f\xe0\x19\x17\x10\x67\x43\x91\x62\x7c\x79\x64\x3c\x80\xcf\x1e\x3a\xc0\x78\x8a\xf5\x1e\xd6\xe0\x0d\x83\x90\x71\x8f\xda\x78\x0a\x7c\x83\xfc\x67\xf0\x8f\x4f\x20\xbf\xc6\xe2\xb1\x34\xef\xe8\x55\xe6\x8d\x41\xe4\x8d\x67\x91\x37\x4e\x39\xe4\x8d\x67\x30\x8f\x23\x2c\x3f\xb4\x01\x7f\x8d\xe1\xdb\x6c\x79\xa3\xdb\x25\x6f\xcc\xe2\xef\x26\xec\xbc\x71\x93\xac\xdf\x85\xef\x4d\x02\x1a\x7d\x37\xd1\xf5\x1c\x64\x6f\x23\xec\xcf\x33\xfb\x1b\x81\x7f\xc2\xf0\x0d\x77\x94\xcf\x0c\xbe\xf5\x39\xe9\xdb\xbe\x07\x25\xde\xa5\x7f\x2f\x1c\xaf\x06\xcf\x29\x7e\x1f\xba\x68\xdb\x97\x6f\xb8\xee\xcb\xd5\x52\x8e\x15\xf7\x65\x22\x52\x9c\x9f\x99\xbf\xfb\x58\xbc\x27\xdf\xb5\xda\xbf\x63\x2d\x8f\x07\x6e\x50\xf6\xcf\xe9\x3c\xc5\xf9\xa7\xb1\xae\x68\x9d\xdb\xcf\x05\x57\x8a\xeb\xa8\xc2\xb4\x8f\x1b\xeb\xca\x7a\x5f\xa6\xdf\x8f\xf1\xef\x43\x8d\xef\xa9\xf1\x1d\x24\x78\xab\x7e\xdf\xab\xca\xab\x4e\x3c\xfd\xd2\x1d\x9c\x83\x6c\xfe\x6f\x50\xcf\x83\xfe\xbd\x4c\xf2\x34\x7d\x4f\x1a\xd6\x1e\x2f\xee\x8b\x7e\x93\xdf\x8d\xf1\xeb\xbc\x5f\xed\x87\x93\x55\x88\xcb\x77\x69\xdf\x32\xfc\x4d\x7e\xe4\xef\xcf\x86\x87\xe0\xaf\xd3\x15\x16\xff\xc4\x4e\xeb\xfe\xa2\xf8\x4e\x9e\xbe\x4f\xca\xfa\xbd\x64\xf2\x34\xdd\x13\x18\x79\xfe\x8b\xe2\x3c\xf9\xcc\xdf\x67\x2b\xee\xcd\x9c\xfc\x3c\xe7\xe6\x67\x53\xde\x08\xb9\xf8\xb9\xc2\xf4\x9f\xa8\x10\xab\x3f\xfc\x56\xfd\xa2\xfe\xad\xd1\xdd\xd1\x2e\x94\x7f\x77\xf9\xdb\xfa\x5b\x8d\x17\xf5\x6f\xd5\x2f\xea\x9f\x86\xfd\x4a\x6e\xf3\xab\x7e\x29\xfe\x56\xfd\xa2\xfe\x69\xd8\xff\xe5\xf9\x6b\xd5\x2f\xc5\x5f\xc1\x2f\x0d\xab\x7e\xb1\xfd\xf4\x75\xb4\x9a\x77\xad\x3f\x6d\x75\x3f\x52\xfe\xf4\x78\x39\x23\x56\x79\x9d\xf9\xf7\x42\xf7\x6e\x71\x3b\x9f\xcf\xd7\x42\xd6\x86\xf6\x08\xff\xa9\xb5\xda\xc3\xe6\x7c\x2c\x84\x18\x44\x59\xc0\x9e\xc0\xbf\xe7\xfd\x06\xd6\xae\xa8\x87\x3f\x01\x14\xbd\xa6\x7a\xf8\x0c\x4b\x5c\xa9\x36\xb0\x53\x7a\x67\xd6\x19\xd8\x18\xa0\x54\x95\x81\xe1\x68\x28\xe6\x4c\x36\x2e\xe1\xdf\x23\x98\xd4\xaf\x08\x21\x7e\xaa\xdb\x2d\x63\xa2\x5f\x97\x6b\xc4\x27\x1a\xd6\x58\xf1\x87\x80\xfb\x2b\xad\xf8\x5f\x7b\x09\xbf\xc2\xf0\x08\xf0\x76\xaf\x15\xff\x77\x0f\xe1\xbd\xac\xfe\x8f\x81\xd7\xfb\xad\xf8\x19\xe0\x1d\xac\x3f\x19\xf4\x67\x90\xd5\xdf\x0b\xfc\x0c\xc3\x37\x01\x1f\x67\xfd\x79\x0f\xed\x5f\x62\xf5\x53\xc0\xe7\x18\xfe\x97\x52\xbf\x4a\x74\xb0\xfe\xff\xdc\x43\xf8\x08\xc3\x7f\x04\xbc\x8e\xb5\x33\x02\xbc\x83\xe1\xef\x54\x10\x1e\x61\xf8\xdf\xa0\xfe\x34\xeb\x7f\x8d\xac\xbf\x56\x2c\x32\xbc\xdb\x4b\xf8\xa0\xcf\x8a\xff\x9d\x87\xf0\x08\x8b\x85\x41\xe0\xd3\xac\xfe\x09\xb4\x33\xcf\xfa\xd3\x0e\xdc\x5f\x65\xc5\x97\x81\x4f\x5b\x61\xf1\x7b\xc0\x79\xb2\xf9\x09\xec\xf2\xd8\x3c\x25\xc7\xb5\x4e\x44\x58\xce\xfe\x73\xe0\x75\xd5\x56\xbc\x15\x78\x2f\xc3\xdf\xf4\x12\x3e\xcf\xda\xef\x00\x9e\x62\xed\xf7\xa3\x9d\x10\x6b\xa7\x12\xf8\x1c\x9b\xdf\x10\xda\x59\x66\xf8\x01\xbd\x3e\xf3\xcf\x6e\xe0\xd3\x6b\xad\xf8\xd7\x81\x8f\x33\x3c\xef\xd0\xff\xff\xd6\xfb\xcf\xf0\x83\xc0\x47\x18\xfe\x18\xf0\x45\x86\x7f\x4b\xe2\x35\x62\x9c\xf9\xe1\x03\x0f\xe1\xf5\x6c\x5c\x6f\x55\x10\xce\xd7\xef\x11\xb4\xc3\xd7\x4b\x13\xf0\x6b\x0c\xff\x19\xda\x5f\x60\xf8\x7e\xd4\x5f\x66\xfd\x1c\x43\xfd\x6e\x76\xef\x95\x04\xbe\x9f\xe1\x5f\x95\xfd\xbc\xbf\x98\x0f\xf5\xdf\x2e\x89\x3f\x60\xf3\xdb\x0e\x89\x07\x6c\xeb\x42\xc8\x7b\x5a\xaf\x1d\x94\xb8\xcf\x01\xaf\x74\xc0\xab\x1c\xf0\xb5\x0e\xf8\x3a\x07\xbc\xc6\x01\xbf\xdf\x01\x7f\xc0\x01\x0f\xd8\xb0\x9d\xf2\xfe\xf1\x6b\x36\xfc\x98\xbc\xc7\xdc\x60\xc3\x0f\x49\x7c\xbd\x0d\xbf\x28\xdf\xaf\xfd\x8e\x0d\xbf\x2d\xdb\x7f\xc4\x86\xbf\x24\xdb\x79\xd4\x86\xef\x92\xfb\x5a\xbd\x0d\x1f\x93\xf5\xed\xe3\x7d\x58\xb6\x6f\xf7\xdb\xe7\xb2\xbe\xdd\xcf\x3f\x97\xed\xdb\xe7\xf7\xb0\xc4\xed\xf3\x38\x24\xdb\xb1\xfb\xb3\x52\xd6\xb7\xcf\xcb\x3f\x49\xdc\x1e\x27\xdf\x94\xb8\x3d\x1e\xce\x4b\xbf\x3d\x64\xc3\x3f\x93\xe3\x7a\xd8\x86\x2f\xc8\xfe\xd8\xe7\x71\x87\xc4\x83\xf6\xfa\xb2\xfd\x3a\x1b\xde\x20\xeb\x3f\x66\xc3\x7f\x26\xeb\xff\xae\x0d\xff\x8a\xc4\xbf\x6a\xc3\x3b\x50\x16\x96\xd1\x37\x04\xdd\x45\x9b\xe5\x14\x93\x67\x4c\xf2\x4b\x05\x9f\xac\x31\xe4\x97\x85\x10\xd3\x7e\xeb\x73\x73\xfb\xbb\x58\xfb\xbb\x58\xfb\x05\x79\x82\xb5\x3f\xe6\xb5\xca\xc2\x6f\xb5\x17\x32\xc9\x11\x66\xaf\x50\xff\x1a\x93\x1b\x34\xab\xbc\xec\xb5\xb6\x17\xf1\x19\xf2\x8b\x05\x3e\xe3\xb3\x3e\x5f\x64\xf6\xea\xaa\xac\xf2\x78\xb5\x21\xef\x29\xec\xeb\xcc\x7e\x3b\xb3\x3f\xcd\xe4\x91\x2a\xab\xfd\xba\x6a\xab\xfd\x8e\x6a\xab\xbd\xc1\xb5\xd6\xfa\xf3\x5f\xb2\xda\x8f\x30\xfb\x73\xcc\x5e\xbd\xc7\x2a\x0f\x56\x58\xdb\x9b\xf1\x5b\xe5\x8e\x2a\x6b\xfb\x66\x7f\x3f\x5f\x18\xbf\x49\x7e\x01\x67\x7f\xb3\xbc\x9f\xc9\x1d\x9a\xb5\xfd\x26\x93\x1c\x16\xa2\x98\x91\x0a\xc3\xde\x56\x78\x6e\x92\x43\x88\x49\x5d\xde\x6e\x1a\x6f\x41\x6e\x2b\xf0\x03\x93\xfc\x54\xc1\xbf\x26\xf9\xe9\x02\x7f\x33\xc9\xcf\x14\xe6\xc3\x24\xef\x10\x42\x5c\x36\xc9\x7f\x60\x8a\xa7\x6a\xfd\xcc\xb0\x29\x93\x18\xcc\x88\xbe\x81\x44\x26\x35\x70\xf4\xd5\x44\x34\x9a\x3c\x92\xc8\x44\xe3\xe9\xbe\x68\x2c\x1e\x4f\xa4\x32\x62\xd3\x40\xa2\xbf\xf8\xf8\x49\xfe\xf4\x70\x2c\x95\x7e\xb2\xe7\x40\xf2\x48\x3a\x13\xeb\xef\x8f\x0e\x24\x2c\x6d\x65\xe2\xa9\xe8\x89\xd6\x68\xfc\xe8\x91\x23\x89\x78\x46\xf4\xa9\x61\xab\x05\xd5\x43\xe5\x13\x6e\xa7\x45\x6d\xa7\xc5\xcd\x4e\x8b\xa3\x1d\xe3\x89\x1c\x62\x26\x9e\xca\x0c\xc4\xe2\x89\x81\x68\x3a\x13\xcb\x1c\x4f\x17\xd1\x68\x66\x20\xd6\xd3\x93\x8c\x47\x13\x27\x12\x47\x32\x69\xee\x90\x54\xf2\x00\xb0\x57\x8f\xf7\xf4\x24\x06\x44\xf4\x44\x62\x20\x9d\x3c\x7a\xc4\xdc\xfd\x9e\x03\x51\xd4\x2f\x76\xdd\x04\x59\xbb\xcd\x1f\xa8\x51\xcb\x28\xd3\x89\x23\x07\x0e\xa7\x0f\x5a\xdc\x92\x4e\x64\xe4\x48\x12\x7c\xe0\xc6\x03\x73\xf5\x78\xff\xd1\xb4\xad\x2a\x81\xd1\xfe\x64\x3c\x71\x04\x4f\x37\x25\x7a\xa3\x3d\x03\xb1\xc3\x09\xb1\x29\x9d\x19\xc8\xc4\x5e\x15\x9b\xd2\xd9\xc3\x85\x72\xf7\xce\x9d\xad\xd1\xed\x85\xa2\x39\xba\x59\x96\x2d\xd1\x66\x59\x6e\x41\xd9\x8c\xb2\x35\x1a\x22\x38\x84\xda\x21\x42\x9b\x43\xd0\xc2\xe3\x66\x3c\xd7\xf1\x6d\x54\x6d\xf3\x36\x3c\xde\x86\xc7\xdb\x8c\xb9\x92\x73\x14\x4d\xa6\x4e\xb4\x12\x86\x29\x4e\x1f\x8d\xf7\x99\xd0\xcc\xf1\x54\x7f\x22\x95\x3c\x40\xd0\xee\x9d\x3b\xb7\x46\x5b\xc9\x44\x2b\x4c\x00\xdd\x0c\x58\x97\x9b\x21\x53\xd9\x8c\xb2\x35\xba\x95\x1e\x6f\x85\xf6\x56\x68\x41\x6e\xc6\x63\x2a\xb7\xa0\x6c\x2e\x94\xf6\x8e\xb7\x28\x3b\xde\x62\xef\x78\x8b\x3d\x42\x25\x2a\x4d\xb5\x50\x0f\x20\x6d\x41\xb9\x19\x70\x73\x0b\x3a\x20\xcb\x6d\xd1\x2d\xa8\xb6\x05\xf3\x01\xb9\x59\x96\xdb\xa3\x9b\x0b\x45\x88\x8a\xad\xd1\x2d\x9b\x51\x0b\x72\xb3\x8e\x37\xc3\x48\x33\x9e\x43\x6e\x86\x4c\x65\x6b\x74\x73\x13\x79\x61\xb3\x9e\x29\xef\xee\xf7\xa7\x1e\xa1\x64\xd3\x4b\xd8\xd8\xce\xb1\x73\x08\xa7\xe3\x1a\xfe\x63\xd7\x01\xc5\xfb\x16\xfe\xe3\x57\x7e\xeb\x34\x77\xfd\x41\x86\xb3\xe3\x89\xa8\xd2\x84\x92\xc5\xcf\xfc\x31\x95\xfa\xbd\xd1\x46\x7c\xdf\xa1\xeb\xeb\xf8\x92\x43\xff\xf5\x73\x0a\x3f\x67\x73\xfb\x9f\x0b\xb5\xfd\x2b\xb0\xdf\x6d\xb2\xef\x53\xd8\x7f\xdf\xc1\xfe\x18\x1a\x2d\x35\xfe\x9c\x83\xfd\xda\x3f\xb1\xda\xd9\x08\x4e\xcc\xed\x9f\x71\xb0\xef\x07\x0f\xe9\x2d\x31\xfe\xd7\x1d\xec\xd7\xc3\xfe\x7e\x93\xfd\x2a\x85\xfd\x35\x1e\xb5\xfd\x14\xfd\x19\x48\xf1\x1e\xce\xc9\xbe\xc7\xa3\xb6\x3f\x02\xfb\x63\x26\xfb\x6b\x15\xf6\x9b\x1d\xec\x37\xe9\x47\xa2\x75\xee\xf6\x7f\xdf\xc1\x7e\x6d\x17\xfa\x61\xb2\xbf\x4e\x61\xff\xeb\x0e\xfe\x6f\x6a\xa4\x32\x55\xe5\x6e\xff\x31\x07\xff\x8f\xc1\xbe\xd9\xff\x35\x0a\xfb\x57\x1c\xd6\xdf\xc4\x16\x2a\xe7\x84\xbb\xfd\xcb\x0e\xeb\x6f\x09\xf6\xeb\x4d\xf6\xef\x57\xd8\xbf\xe0\x60\xbf\x17\x7f\x67\xcf\xef\x4d\xb8\xfd\xf3\x0e\xf6\x6b\xb1\xf0\x9a\x4c\xf6\x1f\x50\xd8\xff\x85\x83\xfd\x45\x7c\x7f\xc9\xef\xc1\xb8\xfd\x8f\x1c\xec\xb7\x77\x5b\xed\x6c\x94\xb7\x19\x76\xfb\xef\x79\xc9\x3e\xcf\xc1\xdd\xf8\x7b\x37\xfe\x9d\x1a\xcf\x9f\xff\xe6\xa0\xdf\x1b\x2a\x4f\x3f\xa1\xa9\xf5\x47\xb6\x97\xa7\xbf\xdd\x41\x7f\xbc\xad\x3c\xfd\xff\xf0\xa8\xf5\x67\x9e\x2a\x4f\xff\x07\x0e\xe3\x9f\x7b\xba\x3c\xfd\xff\x75\xb0\xbf\xf0\x4c\x79\xfa\x73\x0e\xf6\x97\x77\x94\xa7\x5f\xe3\xa0\x5f\xdb\x5e\x9e\x7e\xbb\x50\xeb\x37\x3c\x5b\x9e\xfe\x8b\x0e\xf3\xd7\xbe\xb3\x3c\xfd\xaf\x39\xe8\x47\x9e\x2b\x4f\xff\x39\x07\xff\xa7\xbe\xa1\xae\xcf\xf9\xc7\x80\x83\xfd\x8c\x83\x3e\x97\xbb\x60\x9f\x5d\x57\x8a\x41\xe8\x2f\x30\x9c\xaf\xff\x3f\x72\xc8\xff\xdd\x58\xff\xfa\x7d\x47\x61\xfd\x3f\xae\x58\xff\x31\x8f\xdd\x76\xe1\x17\xc1\xff\xef\x64\xc4\x74\x3e\x7f\xd6\xa4\xaf\xdf\x18\xfd\x5f\x00\x00\x00\xff\xff\xdc\x54\x19\x6f\x90\x5f\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 24464, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

