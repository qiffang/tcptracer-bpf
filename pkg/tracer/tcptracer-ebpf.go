// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x6f\x6c\x1b\x47\x76\x9f\x25\x45\x8b\x92\xcf\x91\x73\x2e\x63\x99\x69\x2e\x72\x2e\x39\x0b\x42\xe0\x48\xb2\x62\xd3\x4a\xe2\x53\x9c\x7f\xaa\x90\x56\x4a\x62\x26\x6a\xda\x80\x62\x68\xca\xa2\x24\xdb\x14\x49\x3b\xa2\x64\xf4\x74\xb9\x24\x70\x85\x14\x90\x2f\x39\x40\x0d\xdc\x42\x94\xe5\xb3\xee\x90\x43\xdd\x22\x57\xbb\xa8\x5b\xb9\x6e\xd0\xea\xc3\x01\x75\xd3\xf4\x2a\x04\x46\xa1\x0f\x69\xaa\x06\x69\x21\x04\xae\x2b\x04\x3e\xb3\xe0\xbc\xdf\x72\x77\xdf\xce\x2e\x29\xdb\x77\xfd\x50\x11\xb8\x9b\xbc\xdf\xce\x9b\x37\xf3\xe6\xcd\x9b\xdf\xcc\xae\xfc\x9d\xa7\x9e\x7d\xda\xa3\x69\x42\xff\x69\xe2\x7f\x84\x21\x19\xbf\x85\x17\x8d\xff\x6e\xc3\xff\xd7\x0b\x4d\xcc\xdd\x45\xd8\x9b\x42\x88\x3b\x84\x10\xa3\xd5\xcb\xf9\x82\x9c\x8d\x26\x25\x3e\x1a\x5c\x91\xf2\xdc\x34\xd5\xab\xf4\x08\xb1\x9c\xcf\xe7\xe7\x4e\x41\xf6\x0a\xb1\x92\xcf\xe7\x6b\x99\xd1\x73\x15\x46\xbb\x9e\x82\x0c\xfc\x07\x28\xb3\x9b\xbb\x98\xdd\x76\x69\xe7\x1c\xda\x19\x0d\xb6\xd9\xec\xb6\x2b\xec\xbc\x29\xc7\x2c\x44\x40\xdc\x21\x9f\x64\xd7\x11\x5e\x8e\x9e\x57\x08\x71\xa0\x52\x88\x3a\x21\xc4\x6b\x28\xc3\x95\x3e\x8d\xeb\xb7\xb9\xd8\x9d\xab\x24\x39\x50\x79\x83\xc6\x35\x04\x59\xbb\x4e\x72\x0e\xe3\xf2\x60\x5c\x0d\x8d\xe4\xdf\x34\xea\x79\x9f\x93\xfd\x08\x7b\xaf\xc9\xf6\xb2\x29\xbf\xc4\x5f\xf9\xfa\x55\xf2\x63\x15\xf4\xde\x5b\xca\x53\xb9\x88\x72\x01\xe5\x65\x94\xf3\x28\x2f\xa2\x3c\x8f\xf2\x2c\xca\x59\x94\x53\x28\x27\x51\x4e\xa0\x3c\x8e\x72\x0c\xe5\x70\xb1\xdf\x1e\xd9\xef\x3e\xc2\x83\x49\xea\xff\xd0\x46\xcc\x13\xd5\xcb\xa6\x6a\x31\xbe\x7a\xaa\xd7\x30\x06\xbc\x0e\x78\x1d\x70\xb2\x93\x4d\xd6\x13\x5e\x4d\xf6\xb3\x47\x1a\x49\x7e\x99\xfa\x95\xcd\x84\xc8\x7f\xc3\x14\xad\xa3\xe3\xe8\x7f\x07\xf5\x3f\x3b\xdc\x4e\xcf\x53\x5d\x68\x1f\xe3\x1d\x3f\x6b\xf1\x43\x34\x95\x91\xcf\x63\x0d\x57\x20\x0f\x43\x26\x3f\x26\x52\xc7\xa4\x3c\xd0\xf0\x29\xe4\xdf\x83\xfc\x19\xea\x27\x51\x7f\x01\xcf\xc7\xf0\x7c\x09\xcf\xf7\x4b\xf9\x80\x87\xe2\x27\x9a\xed\x91\x72\xe7\xf7\x69\xde\xa2\xd9\x3e\x2a\xd3\x83\x54\xcf\x4b\xf5\x3a\xdf\xc1\xbc\xb6\x62\xfe\x1a\x68\xfe\xe2\x5a\x54\xfa\x3b\xa0\x1d\x43\x1c\x7d\x9f\xe2\x5b\xd3\x24\xee\x13\x7f\x4a\x71\x81\x78\x1c\x08\x3e\x2f\xf5\x6a\xde\x22\x79\x2e\x47\x65\xa5\x26\xc4\xf3\xf9\x7c\x5e\x9f\xbf\xb9\x98\x11\xb7\x85\xa5\x99\xc8\x91\xde\x40\x90\xc6\xe1\x13\x7f\x8c\x71\x76\xe7\xa9\xbc\x4e\xcf\x1b\xf6\xa1\xbc\x86\x7e\xf6\xe1\xf9\x0a\xe2\x80\xe6\x5d\x6f\xbf\x66\x93\xbd\x1f\xdd\xe8\x47\x85\xc9\x7e\x76\xa8\xae\xa4\xde\x75\xa5\x5e\x7d\x49\xbd\x7d\xa6\x71\x1b\x7a\x8d\x25\xf5\xae\x29\xf5\x28\x0e\x6b\xee\xb2\xd7\xef\x43\x7d\xbf\xc2\xbf\xd9\x21\x8a\xdb\xec\x29\xf2\x97\xca\xde\x8a\x62\x7c\xd1\x19\xf8\xbf\x83\xf2\x44\xf4\x14\xcd\x43\xac\xb5\x85\xe2\x6f\x5a\x9f\x8f\x10\xc9\xb9\x6b\x98\xc7\x56\xaa\x7f\x9a\xe6\x25\xf6\xf2\xa3\xb2\x0c\x54\x0c\x58\xe2\xee\x35\x94\x01\x2f\xc5\xe5\x4b\x1e\x21\xf2\x79\x21\x02\x9e\x5e\x92\x35\xc8\x1a\xc5\xb5\x9e\xbf\x46\x83\x7d\x2c\x3f\x0f\x5b\xf2\x81\x79\x5c\x49\x8c\x6b\x23\xc6\xb5\x91\xe5\xd3\x46\xb6\x7f\xf4\x29\xf2\xab\x4f\x3c\x2f\xcb\x80\xb6\x4d\xe6\xc7\x80\xf6\x98\xf4\x4f\x61\x1d\xf8\xe4\x73\x5a\xf7\x7a\x7f\x62\xc1\x7d\xe8\x0f\xf9\xaf\xe6\x69\xe7\x38\x74\x9f\xaf\x6e\xc7\xf9\xda\xa7\x98\xaf\x03\x02\x7e\x45\x59\x18\xc7\x97\xf9\x7c\x5e\x1f\xc7\x2b\x1b\x9b\x8a\xfd\xd4\x64\xff\x2e\x62\xbd\x35\xb2\xfe\xd3\x3c\x67\x73\x94\x3f\x55\xf1\x66\x5e\x0f\xbc\xff\xd1\x1c\xe2\x24\x78\x05\xed\xdf\x6f\x69\x7f\x20\x48\x71\x52\xb3\xce\xde\xee\x35\xd7\x3c\xa1\xc7\xd7\xa7\x68\x77\x0b\xeb\x37\xf2\x40\xae\xce\xb1\xdf\x2b\xae\xfd\x46\xbc\x06\x17\xd1\xfe\x06\xd6\xef\x5e\x6a\xf7\x45\x7b\xbb\xbd\xae\xfd\xee\x45\xbf\x3f\x43\xbb\xb4\x01\x47\x73\xfb\x60\x6f\xc1\xc6\x2f\xca\x89\xcb\x52\xbc\xe6\xff\x8c\x4f\xd5\x72\x3e\xd5\xc5\xd6\x6b\xbb\xcd\x6e\x97\x1b\xaf\x41\x9c\x04\xd6\x51\x28\x97\xa3\x57\x58\xa7\xd9\x5e\x61\xab\xef\xc6\xdb\x0c\xfe\xf4\x25\x8d\xa3\xc8\x9f\x96\x49\x9e\xe6\xe3\xa8\xcb\x5b\xeb\x85\x89\x3f\x69\x9f\x13\x7f\x1a\x02\x7f\xda\xba\x24\xac\x7a\xe0\x4b\x41\xec\xb7\x41\xf0\x25\xac\xc7\xd1\x20\xf8\x43\x10\xfc\x21\x08\xbe\x11\x04\x5f\x0a\x82\x2f\x05\xc1\x97\x82\xe0\x4b\x41\xf0\x25\x96\x0f\x8b\xf9\xd2\x0b\xfe\xd4\xda\x8d\xfd\xb3\x07\xbc\x88\xf8\x53\x36\x0d\xde\xd4\x9a\xb4\xec\xaf\xd9\x34\xed\x8f\xd9\x0c\x78\x52\x07\xec\xb4\x82\x6f\xa5\x1b\xf1\x3c\x84\xe7\xe8\x57\x2b\xf8\x55\x1a\xf9\x2c\xd3\x8e\xe7\x18\x47\x2b\xf8\x55\x1a\xbc\xa9\x75\xd6\x32\xee\x68\x06\x7c\xa9\xe3\x67\x90\xc1\x97\x3a\xc8\x6f\x89\x0c\xf8\x52\xc7\xc7\x90\xc1\x97\x3a\x7e\x8e\xfa\xe0\x4b\x1d\xf3\x78\x0e\xbe\xd4\xb1\x80\xe7\xe0\x41\x15\xe0\x4b\x47\x68\x1f\xea\xdc\x87\x79\xea\x00\x6f\xcb\x10\x8f\x8a\x1e\x01\xbf\xf2\x81\x37\x3d\x85\x7a\x2f\xeb\xf3\x15\x42\x49\xfb\x65\xd8\xf3\x23\x51\x08\xdd\xb9\x33\x88\xbf\x4a\x21\xce\xe7\xf3\xf9\x9a\x9d\x88\x4b\x53\xfe\x68\x34\xed\x53\xb6\xfd\x20\x87\x76\x37\x53\x3c\x65\x73\x8d\x90\xd1\x8e\x29\xbe\xeb\xd8\xfa\xed\x56\xee\x67\xef\xd2\x38\xfc\xd8\x2f\x50\x86\xfd\xef\xb0\x38\x85\x1d\xc4\xf9\x68\x70\x19\xe5\x12\xf2\xd9\x57\x28\x57\x80\x2f\x22\x9f\x61\xff\x18\xa2\x79\xe5\x3c\xa7\xd0\xaf\x8d\x0e\xe3\xf7\x5b\xf6\x41\x67\xfd\x5a\xa6\x5f\xb7\x0a\x7d\xb3\xde\xf2\x2a\xed\xfa\x99\xfe\x92\x52\xbf\x34\x2f\xfc\xea\x26\x79\xe1\xca\x2a\x79\xe1\x62\x59\x3c\x63\xd1\x91\x67\x28\x79\xef\x8f\x10\x17\xef\x51\x1e\xc9\xfe\x10\xf1\xd1\x4f\xf9\x64\x2e\x4a\xfa\x9d\x27\xa8\xcc\x9e\x41\xdc\x8c\x20\x9f\xcc\xe2\xfc\x38\x4e\x79\x26\x31\x83\x38\xea\x18\x06\xaf\x5c\x01\xaf\x1c\x61\xbc\xf3\x18\xf1\x48\x6d\x0f\xf5\xf3\xbb\xb0\x53\xcc\xbf\x8f\x10\xfe\x38\xc9\x06\x7f\x24\xff\xcc\x6d\xe5\xf8\xc3\x52\x1e\xed\xf0\x23\x1f\x6d\x44\xde\xab\x65\x79\xbe\xcd\xb2\xbe\xb3\xb9\x2e\xcb\x3a\x37\xfb\x2b\xa4\xe0\x9b\xe1\x2a\xda\xc0\x74\xbf\x1c\xd0\xb0\xee\x50\xd6\x4a\x3a\x60\xf0\xb4\x7b\xb6\xd2\x46\x14\xae\xdc\x62\x19\x67\x29\xbd\x57\xb6\xd2\x04\xbe\xb6\x8e\x9e\xc7\xfa\x69\x5e\xf4\xf5\x1d\x1b\xbf\x1f\xfd\xa7\xf1\x5e\xd1\xa8\x7f\x03\xc1\x7a\xe0\xb5\x0c\x6f\x00\xbe\x11\xeb\xfa\x41\xdb\xbe\xcd\xf3\x4d\xa3\x32\xdf\x60\xfc\x26\xbd\xee\x32\xf4\x56\xc3\x6f\xfc\x92\x67\x84\xd8\xbc\x51\x9e\xcf\x1e\xa0\xbc\x9e\xed\x4b\xda\xfa\xb1\xe0\xc6\x07\x70\xdf\x11\xa8\xba\x87\xf4\x11\xcf\x61\xed\x6e\xb9\xcf\xcf\x0d\xa9\xe7\xa5\x70\x2e\xa8\x94\xf5\xee\x92\xed\xf0\x38\x1a\xc0\xfe\x56\xee\xbd\x4e\x00\x7c\x31\x8b\xe7\x01\x6d\x83\xb4\x7f\xfb\xdb\x1d\xa7\x76\x99\x9f\xb3\x1a\xed\xdb\x73\xdf\x23\x59\x95\x27\xce\x2a\xf2\x52\x22\x47\xfd\x09\x6b\x9f\xe7\x3d\x16\x9e\x7e\x16\xf1\xb4\x8c\x7e\x2f\xa2\xbc\x9e\x37\x8f\x27\x86\x7d\x26\x7b\xa2\xb6\x6c\xfb\x96\x3c\x75\xa2\xae\xa4\xde\xb2\x52\xaf\xbe\xa4\xde\xa2\x2a\x0f\x9f\x68\x2c\xa9\x77\x5d\xa9\x87\xfc\x5d\x6b\xaf\xdf\x66\xce\xdf\xdf\x33\xe6\x8f\xf4\xf4\xfc\xdd\xe6\x98\xbf\x97\x94\xe7\x7a\xf8\xbf\x63\x12\xf9\x75\x19\xf9\xf5\x24\xf2\x2f\xe6\xa3\x81\x78\x5a\x02\xe7\xb9\x81\xe0\x34\xd5\x3f\x4d\xf3\x12\x7b\x79\x86\xf2\x71\xc5\x5f\xc8\xd2\x7e\xae\xff\x73\x89\x1b\xe7\xfa\x0f\x48\x2e\xe6\xdf\x3f\x23\x3d\xdb\xbd\x27\xad\x1f\x9f\x68\x16\x3c\x9e\x27\x5d\xe3\x99\xf8\xe3\x39\xf0\xf8\xd1\x11\xf0\xe9\x11\xf0\xb3\x91\xb3\xb6\x7c\xad\xc7\x8d\xe4\x13\x5e\xab\x7f\xdf\x94\x7d\x28\xe4\x15\xf2\x6f\xf6\x54\x48\x39\xce\xd1\x56\xe3\xbe\x58\x93\x71\x4b\xfb\x43\x34\xf7\x01\xe2\x78\x1f\xe4\x49\xc8\x7d\x90\x4f\x42\x1e\x84\x9f\xa7\x58\xfe\xc5\xfe\x98\x9b\x66\x78\x0a\xfa\x33\xd0\xcf\x50\x39\x32\x8c\xf2\x18\xf2\xb6\x7e\x9e\x00\xcf\xcf\xe9\x3c\x95\xf6\xed\xb9\x19\xf8\xa1\x82\xe2\x4c\xdf\x9f\x6a\x3d\x56\xff\x9e\xf3\xd1\x3d\x7d\xc1\x1f\x5b\xca\x9c\x0f\xaf\xf4\xdd\x51\xb2\x7b\xcb\xf9\xe3\x60\xbe\x5a\xb9\x1f\x4f\xde\x1c\x2f\x3d\xd1\xa5\xec\x8f\x8a\x97\xb6\xa9\xf8\x9d\x8b\x3e\xe7\xa5\x93\xab\xd0\x2f\xc9\x4b\x5d\xec\x96\xc5\x4b\xcb\xc8\x6b\x4a\x5e\x5a\x46\x5e\x53\xf2\x52\x97\xbc\xb6\x58\x56\x5e\x5b\x25\x2f\xcd\xb5\x59\xce\x8f\xd9\xd3\x88\x0f\x9c\xcf\x3a\x03\x02\xed\x22\x5e\x5a\x69\x7d\x64\x67\xc0\x47\xf5\x73\xe2\x34\xe2\xa7\x01\xe7\x4c\xdc\x0b\x0d\x04\x3f\xa2\x75\x37\x05\x3e\x5a\x4d\xe7\xce\x80\x6f\x0b\xb5\xdf\x42\xed\x07\x2a\x36\xb3\xbc\x17\x60\x79\x6f\x93\x43\xde\x5b\x27\xf3\x9e\x79\x7d\x9d\x75\x5d\x5f\xd5\xb6\xfd\xde\xa9\x3e\xe5\xc7\x0a\x96\x1f\x71\xde\x1e\xc1\x79\x7c\x64\xd2\x96\x1f\x27\x7f\xa9\xf9\xf1\xa4\x25\x3f\x66\xb1\xde\xb3\xd3\xc8\x53\x0d\xd6\xfb\x0b\x3d\x9f\x65\xa7\x71\x5f\xd2\x60\xbd\xef\x48\xe4\x2e\xb3\x3c\x79\x1c\xf8\x47\x0c\x1f\x87\xfd\x8f\x61\xff\x6d\xe4\xcd\x09\x94\xef\xc2\xde\x2c\xcb\x9f\x53\x37\x9d\x3f\xbb\x4d\xf9\xd3\x27\xfe\x96\xf4\xc1\x5f\x39\x5f\x35\xee\xcd\x1a\x8b\xb2\x5c\x27\x7e\xc4\x6f\x62\x95\x3c\xb6\x78\xaf\xf5\x20\xe9\x83\xb7\x86\xb5\x06\x19\x47\xa3\xfd\xc4\xff\xe7\xf0\xde\xe6\x1c\xec\x8c\x8e\x93\x9f\x63\xe3\xe4\x27\xfd\x9c\x39\x87\xf7\x45\xaa\x75\x39\xaf\x3c\x0f\xeb\xeb\x79\xde\x71\x3d\x7f\xac\x58\xcf\xa3\xe3\x14\x4f\x03\xe3\x53\xb6\x38\x0f\xad\x8a\xd7\xd6\x10\x5f\xef\x83\xff\x7e\x58\xcf\xce\x09\xb0\x13\xbc\x55\x3b\x2f\xb8\xf3\x67\x17\xbf\x4d\x29\xf7\x3f\xf4\x87\xf5\x3b\xac\x2d\x31\x3e\x3d\x51\x82\x4f\x87\xac\x7c\x5a\x7f\x4f\xe6\xd2\x9f\x09\xb7\xf7\x64\x2e\x7a\x4a\x3e\xad\xdf\x87\xb8\xe8\x29\xf9\xb4\x7e\x1f\xe2\xa2\xa7\xe4\xd3\xfa\x7d\xc8\x16\x7b\xfd\x90\x79\xdf\x79\xc7\x98\x4f\x6b\x9c\x86\x56\xc9\xa7\xe1\x7f\xdc\x6b\x1a\x7c\x7a\x86\xf1\xe9\x59\xc6\xa7\x7f\xcc\xf8\xf4\xfb\xe0\xd3\xb4\x60\xed\x7c\x9a\x0e\xc4\xc6\xbe\x42\xf1\xa7\xef\x2b\x61\xed\x12\xf5\xd7\x14\xbf\x85\xb8\xf2\x89\x9f\xde\x96\x38\x0c\x6b\x33\x8c\x87\xe9\xf7\x9d\x13\x37\xc7\xc3\xf4\x7b\x36\xd6\x1f\x15\x0f\x0b\xb9\xdd\xd3\x29\xf4\x39\x0f\x9b\x58\x85\x7e\xd9\xf7\x83\x0a\xbb\xab\xba\x1f\x74\xb1\xeb\x7a\x3f\xe8\xa2\xe7\x7a\x3f\xa8\x58\x0f\x8b\x65\xad\x87\x55\xf2\xb0\x19\xc4\x85\xfe\x7d\xc4\x29\xfd\x7d\xc0\x2c\xf6\x6f\xc4\x49\x03\xf6\xfb\x1c\xf8\x17\xde\x7b\x24\xa6\x10\x37\xd5\xb4\xdf\x27\xf0\x1e\x79\xe0\xe5\x4b\xb4\x5e\xce\x80\x7f\x8d\x7c\x48\xf9\x71\x17\xf5\xa7\xf3\x19\x2a\x03\x95\xbf\x43\xfd\xc4\xfd\x78\xe7\x36\x1d\xef\x96\xe5\x4b\xb8\x35\x0b\x08\x7a\x91\xf7\x92\x0f\xb2\x8f\x2e\xfe\xc3\x15\x3e\x59\xf2\xf5\x57\x2b\x97\x9f\xe9\x9e\xee\x09\xba\xd7\x0a\x7b\x46\xa9\x7e\xc9\xfb\xb9\xa3\x45\xff\xfa\x4c\xf7\x55\xfc\x1e\x7e\x74\xbc\xad\xb8\x3f\x79\xe5\x7a\x69\x87\x9f\x88\x0f\xe8\xed\xc7\x82\xcf\xb2\x7d\x0c\xef\x75\x74\x7e\x35\x4d\xf9\x24\x86\xf7\x3c\xd1\xe9\x0b\x90\xf7\x23\x2f\x91\x7f\xaf\xe0\xbe\x72\x00\xef\x7b\x12\xd3\x97\x18\xde\x0f\xfd\x0f\xa1\x3f\x88\x75\x9c\x44\x99\xb1\xf1\xc6\x2e\xc5\x3d\x68\x22\xd7\x8f\xf6\x71\xfe\x3d\x45\xfd\x88\xce\xf4\x20\xef\x11\x21\x9a\xa3\x6b\xd9\xe2\x7b\x96\xd7\x50\x06\x7c\x5f\xa7\xe7\x0f\x08\x36\x6f\x35\x84\x07\x38\xfe\x35\xc2\x4d\x3c\x2d\xe4\xc2\xd3\xf4\x73\x08\x3f\xef\x96\xea\x77\x0c\xef\xbb\x62\xad\xef\x32\xbf\x4d\x32\xde\xf9\x1e\x78\xa7\xee\xbf\x93\x36\xbe\x31\xe1\xca\xf7\xaf\xde\xe0\xf5\xa7\x5c\xeb\xff\xd7\x8d\x5f\x6d\xbc\x4d\xb1\x78\x9b\x61\xf1\x36\xeb\x10\x6f\x3f\x76\x88\xb7\xf7\x6f\x29\xde\x6e\x75\xde\x7d\xe2\xef\x7e\xa5\xfe\xcb\x4e\xeb\xf9\x12\xe7\x8e\x56\x7c\xe7\xa6\xbf\xa7\x9d\x46\xbe\x3c\x85\xf3\x11\xde\xbf\xea\xe7\x24\xfb\x7a\x1e\x73\x58\xcf\xaf\xb3\xf5\xfc\x06\xfc\x7a\x1c\xe5\xdb\xbf\x34\xff\x76\x4b\x5f\xfe\x13\xf9\xa1\xf8\x1d\xa2\xce\x0f\xe0\xb7\x2d\xd6\xef\x07\xf4\xf7\xff\xfc\x1c\x14\xa8\xa2\x17\x3d\xe6\xf5\xa0\xfa\x5e\xc1\x7e\x0e\x6a\x95\xa5\x71\x0e\x0a\xd1\x39\x48\x9f\x47\xb4\x3f\x30\x8e\xef\x4d\xc6\xaf\x82\xaf\x94\xde\x7f\xaf\xae\x62\xdf\xae\xc4\xfb\xf8\x52\xdf\x7d\x8d\x8e\x83\x1f\x8e\xe3\xfb\x8d\x32\xce\x61\x6a\xde\xa1\xef\xe7\x4b\x8e\xfb\xb9\x8a\xbf\x8f\x8e\x4f\xc0\x0f\x5d\x65\xe7\xab\xf2\xde\x5b\xa0\xdd\xe0\xad\xb6\xfb\x1b\x37\x7d\xee\x92\x71\xed\xc7\xfb\x25\x1b\xef\xed\x02\xef\xfd\x8f\xbc\xc7\x92\x07\xf0\x9d\x28\xee\x9b\xf8\xbe\xcf\xef\x27\x63\x38\xbf\x1a\xe7\x35\xf7\xef\x3c\xa2\xe0\x47\xb1\x06\xac\x4f\x7c\x1f\x12\x0b\xd2\x77\x10\xc6\xfb\xbd\x19\xc4\x43\xe9\xf3\xdc\x79\x97\xf3\x9c\x8a\x17\x5e\x30\x7f\x27\xc5\x78\xa1\xf1\x1d\x16\xf8\x59\xee\x2a\xdb\xe7\x2e\xd9\xf2\xc7\xac\x22\x7f\x44\x71\x1f\x1d\xd0\xe6\xb1\x2f\x5e\x50\xfa\x33\xa0\x7d\x08\x3b\x64\xcf\xb8\x47\xfb\x1b\xe0\x97\x18\xfe\xd7\x64\xdf\x94\x9f\x0a\xf1\xa4\x7f\x3f\xc8\xf3\x93\xfe\xfe\xc4\x27\xde\xba\xcd\x71\xf3\x13\x79\x5e\xba\x7d\x71\x73\x73\xdf\x0d\x19\xf1\x74\x05\x71\xa4\x9f\xc3\x3e\x75\x88\xa7\xd2\xe7\x22\xf5\x3d\x4f\xf9\xe7\xa2\xcb\xab\xd4\xe7\xe7\xc1\xf3\x2e\xfa\x7a\x3c\x57\x56\xd9\xcf\x81\x17\x5d\xce\x3b\x46\x5c\x2f\x38\xc4\xf5\x27\x65\xc5\xb5\x71\x4f\x49\xf3\x11\xf6\xe0\xfd\x37\xc6\x53\xfa\x5c\x51\x85\xb8\xa4\x79\xce\xce\xd0\x3c\x87\x2b\x88\x18\x3b\xf1\x63\xca\x02\xa6\xf3\x86\xef\xa1\xe2\xf8\x28\xfe\xc0\x33\xce\x20\xce\x46\xba\x8b\xf1\xe5\x91\xf1\x00\x3e\xdb\xbf\x9f\xf1\x14\xeb\x3d\xac\xc1\x1b\x86\x21\xe3\x1e\xb5\xe1\x18\xf8\x06\xf9\xcf\xe0\x1f\x9f\x40\x7e\x9d\xc5\x63\x69\xde\xd1\xa7\xcc\x1b\xc3\xc8\x1b\x8f\x23\x6f\x1c\x73\xc8\x1b\x8f\x61\x1e\xc7\x58\x7e\x68\x05\xfe\x3a\xc3\x77\xd9\xf2\x46\x97\x4b\xde\x98\xc3\xdf\x4d\xd8\x79\xe3\x76\x59\xbf\x13\xdf\x9b\x04\x34\xfa\x6e\xa2\xf3\x09\xc8\xde\x06\xd8\x5f\x60\xf6\xb7\x01\xff\x84\xe1\xf7\xdf\x54\x3e\x33\xf8\xd6\x17\xa4\x6f\xfb\x1e\x94\x78\x97\xfe\xbd\x70\xac\x1a\x3c\xa7\xf8\x7d\xe8\x92\x6d\x5f\xbe\xea\xba\x2f\x57\x4b\x39\x5a\xdc\x97\x89\x48\x71\x7e\x66\xfe\xee\x63\xe9\xb6\x7c\xd7\x6a\xff\x8e\xb5\x3c\x1e\x78\xbf\xb2\x7f\x4e\xe7\x29\xce\x3f\x8d\x75\x45\xeb\xdc\x7e\x2e\xb8\x58\x5c\x47\x15\xa6\x7d\xdc\x58\x57\xd6\xfb\x32\xfd\x7e\x8c\x7f\x1f\x6a\x7c\x4f\x8d\xef\x20\xc1\x5b\xf5\xfb\x5e\x55\x5e\x75\xe2\xe9\xe7\x6f\xe2\x1c\x64\xf3\xff\x36\xf5\x3c\xe8\x7e\x49\xe0\xef\x71\xc2\xda\x93\xf4\xbd\x69\x3f\xf9\xa7\xe8\x3f\x7c\x57\x73\x0e\xbc\x7e\xb4\x1f\x7e\xe8\x87\x1f\xfa\xe1\x87\x7e\xf2\x83\xf1\xfd\xd2\xc7\x79\xab\xdf\xc9\xbf\x07\xaa\xe0\x77\x94\xfa\xdf\x1f\x45\x87\x2a\xe0\xa7\x25\xe6\x37\x5a\x0f\x89\xa1\x3b\xa4\x3c\x00\x3f\x26\x86\xe8\xbe\xc0\xc8\xf7\x5f\x16\xe7\xcb\x27\xf5\x2e\x23\x3f\x5e\xb7\xc5\xdb\xf5\xb2\xe2\xed\x3e\x59\x46\x53\x24\x3f\xe0\xd9\x20\x6e\xdc\x6b\x7c\x47\x54\xb3\xd5\x98\x47\xc9\xbb\x4c\xeb\x44\xdf\xb7\x42\x2e\xdf\xfb\xd3\xd7\xc7\xc6\x38\xe5\xbd\x69\xa1\xbf\x9b\xad\xfe\x5e\x6d\xff\x03\x62\x3d\xb5\xeb\x83\x7e\x0f\xf4\xd0\x0f\x79\xdf\x72\xaf\xf1\x7d\x01\x8f\xab\x5a\x6f\x21\x8f\x19\xfb\xd2\x9c\x69\x7d\xab\xe2\xab\xc2\xf4\x3f\x51\x21\xd6\x7e\xf8\xad\xf9\x45\xfd\x5b\xa7\xbb\xa3\x4d\x28\xff\xde\xf4\xff\xeb\x6f\x2d\x5e\xd4\xbf\x35\xbf\xa8\x7f\x1a\xf6\x67\xb9\x8d\xaf\xf9\xa5\xf8\x5b\xf3\x8b\xfa\xa7\x81\x5f\xca\x73\xe7\x9a\x5f\x8a\xbf\x82\x5f\xea\xd7\xfc\x62\xfb\xe9\xeb\x68\x2d\xef\x5a\x7f\xda\xda\x7e\xa4\xfc\xe9\xf1\x72\x5c\xac\xf1\x3a\xf3\xef\x99\xae\x67\xc5\x8d\x7c\x3e\xbf\x11\xb2\x36\xf2\xbc\xf0\x1f\x5b\xaf\xdd\x6d\xce\xc7\x42\x88\x61\x94\x05\xec\x41\xfc\xf7\x82\xdf\xc0\xda\x14\xf5\xf0\xa7\x8f\xa2\xcf\x54\x0f\x9f\x9f\x89\x8b\xd5\x06\x76\x4c\xef\xcc\x06\x03\x9b\x00\x94\xac\x32\x30\x5c\x3d\x88\x79\x93\x8d\xf3\xf8\xef\x31\x4c\xea\xaf\x09\x21\x7e\x06\xac\xc7\x53\x7a\xfc\x27\xe5\x1a\xf1\x89\xfa\x75\x56\x7c\x27\x70\x7f\xa5\x15\xff\xa9\x97\xf0\x8b\x0c\x4f\x02\x6f\xf3\x5a\xf1\xff\xf6\x10\xde\xc7\xea\xff\x03\xf0\x3a\xbf\x15\xff\x43\xe0\xed\xac\x3f\x6f\xa3\x3f\xc3\xac\xfe\x20\xf0\xe3\x0c\xff\x4d\xe0\x93\xac\x3f\x7f\x82\xf6\xcf\xb3\xfa\xdf\x05\x3e\xcf\xf0\x9f\x48\xfd\x2a\xd1\xce\xfa\xff\x9f\x1e\xc2\xc7\x18\xfe\xf7\xc0\x6b\x59\x3b\x27\x80\xb7\x33\xfc\xfd\x0a\xc2\xbb\x19\x3e\x8b\xfa\xb3\xac\xff\xdb\x65\xfd\xf5\x62\x89\xe1\x7d\x5e\xc2\x87\x7d\x56\x7c\xce\x43\x78\x37\x5b\xf4\xbf\x0f\x7c\x96\xd5\xff\x01\xda\x59\x60\xfd\xe9\x06\xee\xaf\xb2\xe2\x9b\xd1\x9f\x59\x2b\x2c\x1e\x47\x7d\x9e\x6c\xfe\x15\x76\xfb\x18\xfe\xae\x6c\x67\x83\xe8\x66\x39\x3b\x03\xbc\xb6\xda\x8a\x87\x81\xf7\x31\xfc\xb4\x97\xf0\x05\xd6\x7e\x0f\xf0\x24\x6b\xff\x0d\xb4\x13\x62\xed\x7c\x0b\xf8\x3c\x9b\xdf\x2e\xb4\xb3\xc2\xf0\x63\x7a\x7d\xe6\x9f\xfd\xc0\x67\xd7\x5b\xf1\xa7\x80\x4f\x32\xfc\x1b\x15\xea\xfe\x6f\x04\x9e\x64\xf8\x5b\xe8\xcf\x18\xc3\x5b\x81\x2f\x31\xfc\x8f\x24\x5e\x23\x26\x99\x1f\xe8\xfb\x81\x1a\x51\xc7\xc6\x35\x53\x41\x38\x5f\xbf\x7f\x80\x76\xf8\x7a\x69\x07\x7e\x99\xe1\xff\x86\xf6\x17\x19\xfe\x1d\xd4\x5f\x61\xfd\xcc\xa1\x7e\x17\xcb\x61\x23\xc0\x79\x6e\xdb\x23\xfb\x79\x67\x31\x1f\xea\xbf\x57\x24\xbe\xc9\xe6\xb7\x61\x69\x37\x20\xce\x33\xfc\x5f\x3c\x84\x73\xbb\x42\xde\x5b\x7b\xed\xa0\xc4\x7d\x0e\x78\xa5\x03\x5e\xe5\x80\xaf\x77\xc0\x37\x38\xe0\x35\x0e\xf8\x9d\x0e\xf8\x26\x07\x3c\x60\xc3\x5e\x90\xf7\xde\xdf\xb4\xe1\x43\xf2\x3e\xf7\x7e\x1b\xde\x2f\xf1\x2d\x36\xfc\xe7\xf2\x7d\xe3\xaf\xdb\xf0\xbb\x24\x7e\x8f\x0d\x7f\x51\xb6\xb3\xd5\x86\x3f\x25\xf7\xbb\x3a\x1b\x3e\x21\xeb\xdb\xc7\xfb\xa0\xec\xbf\xdd\x6f\x1f\xc9\xfa\xf6\xf1\xfe\x42\xe2\x76\xff\xff\xb3\xb4\x6b\x9f\xf7\x83\x12\xb7\xcf\xef\x88\x6c\xc7\xee\xe7\x4a\x59\xdf\x3e\x5f\x7f\x29\x71\x7b\xfc\xbc\x20\x71\x7b\x9c\x5c\x92\x7e\xdb\x6c\xc3\x3d\x12\xbf\xdb\x86\xef\x91\xfd\x09\xda\xf0\xbc\xac\x5f\x6b\xc3\xeb\x65\xfd\xfb\x6c\xf8\x17\xb2\xfe\x37\x6c\xf8\x83\x12\xbf\xd7\x86\xb7\xa3\xd4\x30\x77\x21\x26\x27\x99\x7c\xd6\x24\xbf\x54\x18\xfb\x3a\x43\xee\x2e\xec\x87\x7e\xeb\x73\x73\xfb\x4f\xb3\xf6\x9f\x66\xed\x17\xe4\x29\xd6\xfe\x84\xd7\x2a\x0b\xbf\xd5\x5e\xc8\x24\xff\x36\xb3\x57\xa8\x7f\x99\xc9\xf5\x9a\x55\x5e\xf1\x5a\xdb\xeb\xf6\x19\x72\x61\x6e\x8f\xfb\xac\xcf\x97\x98\xbd\xda\x2a\xab\x3c\x59\x6d\xc8\x05\x5e\xd9\xc5\xec\xb7\x31\xfb\xb3\x4c\x1e\xab\xb2\xda\xaf\xad\xb6\xda\x6f\xaf\xb6\xda\x1b\x5e\x6f\xad\xbf\xf0\x35\xab\xfd\x6e\x66\x7f\x9e\xd9\xab\xf3\x58\xe5\xe1\x0a\x6b\x7b\x67\xfd\x56\xb9\xbd\xca\xda\xbe\xd9\xdf\xcf\x14\xc6\x6f\x92\xdb\x71\x27\x60\x96\x7b\x98\xdc\xae\xb1\xf1\x9a\xe4\x27\x0b\xe3\x61\xb2\xb9\xbf\x61\x21\x8a\x19\xab\x1a\xb1\xd5\x68\x92\x77\x43\x47\x97\x5b\x4d\xfe\x28\xc8\x8f\x14\x78\xa9\x49\x7e\xb4\xe0\x7f\x93\xfc\x58\x81\xef\x98\xe4\x3d\x85\xf9\x32\xc9\xdf\x16\x42\x5c\x30\xc9\x6d\xa6\x78\x2b\xc8\xf2\x4b\xbd\xed\x99\xf8\x70\x46\x0c\xa4\xe2\x99\x64\xea\xf0\xab\xf1\x48\x24\x71\x28\x9e\x89\xc4\xd2\x03\x91\x68\x2c\x16\x4f\x66\xc4\xf6\x54\x7c\xb0\xf8\xf8\x21\xfe\xf4\x60\x34\x99\x7e\xa8\x77\x7f\xe2\x50\x3a\x13\x1d\x1c\x8c\xa4\xe2\x96\xb6\x32\xb1\x64\xe4\xe8\xce\x48\xec\xf0\xa1\x43\xf1\x58\x46\x0c\xa8\x61\xab\x05\xd5\x43\xe5\x13\x6e\xa7\x45\x6d\xa7\xc5\xcd\x4e\x8b\xa3\x1d\xe3\x89\x1c\x62\x26\x96\xcc\xa4\xa2\xb1\x78\x2a\x92\xce\x44\x33\x47\xd2\x45\x34\x92\x49\x45\x7b\x7b\x13\xb1\x48\xfc\x68\xfc\x50\x26\xcd\x1d\x92\x4c\xec\x07\xf6\xea\x91\xde\xde\x78\x4a\x44\x8e\xc6\x53\xe9\xc4\xe1\x43\xe6\xee\xf7\xee\x8f\xa0\x7e\xb1\xeb\x26\xc8\xda\x6d\xfe\xc0\x86\x9a\x07\x9f\x8e\x1f\xda\x7f\x30\x7d\x80\x0f\x4e\x87\xad\x55\x33\x72\x68\x71\x7b\x65\xfd\x81\xb9\x7a\x6c\xf0\x70\xda\x56\x95\xc0\xc8\x60\x22\x16\x3f\x84\xa7\xdb\xe3\x7d\x91\xde\x54\xf4\x60\x5c\x6c\x4f\x67\x52\x99\xe8\xab\x62\x7b\x3a\x7b\xb0\x50\x3e\xbb\x77\xef\xce\xc8\xee\x42\xd1\x14\x69\x96\x65\x4b\xa4\x49\x96\x3b\x50\x36\xa1\xdc\x19\x09\x11\x1c\x42\xed\x10\xa1\x4d\x21\x68\xe1\x71\x13\x9e\x53\xb9\x3b\xb2\x8b\x1e\xef\xa2\xda\xcd\xbb\x50\x6b\x17\x6a\xed\x32\xe6\x50\xce\x5d\x24\x91\x3c\xba\x93\x30\x4c\x7d\xfa\x70\x6c\xc0\x84\x66\x8e\x24\x07\xe3\xc9\xc4\x7e\x82\x9e\xdd\xbb\xf7\xe1\xc8\x4e\x32\xb1\x13\x26\x80\x36\x03\xd6\xe5\x26\xc8\x54\x36\xa1\xdc\x1d\x79\x98\xd4\x1e\xa6\x5a\x90\x9a\x1f\x86\x32\xe4\x26\x3c\xa6\x72\x07\xca\xa6\x42\x69\xef\x7f\x8b\xb2\xff\x2d\xf6\xfe\xb7\xd8\x03\x58\xa2\xd2\x54\x0b\xf5\x00\xd2\x0e\x94\xcd\x80\x9b\x5a\xd0\x01\x59\xee\x8a\xec\x40\xb5\x1d\x98\x1d\xc8\x4d\xb2\x0c\x45\x9a\xf1\xb8\x19\x8f\x21\x37\xe9\x78\x13\x5a\x6f\xc2\x73\xc8\x4d\x90\xa9\xdc\x19\x69\x6e\xa4\xe1\x37\xeb\x19\xf4\xd6\x7e\xfd\x1e\xa1\x64\xe1\x75\xf4\xcf\x0a\x8a\x0f\xd8\xb9\x86\xdf\x75\x69\xf8\x1f\xbb\x5e\x28\xde\xdf\xf0\x1f\xbf\x42\xdc\xa0\xb9\xeb\x0f\x33\x9c\x1d\x77\x44\x95\x26\x94\xec\xff\xe2\x6f\x51\xa9\xdf\x43\x6d\xc3\x77\x32\xba\xbe\x8e\x2f\x3b\xf4\x5f\x3f\xf7\xf0\x73\x3b\xb7\xff\x85\x50\xdb\xbf\x0c\xfb\x5d\x26\xfb\x3e\x85\xfd\xd3\x0e\xf6\x27\xd0\x68\xa9\xf1\xe7\x1c\xec\xd7\x75\x5a\xed\x6c\x03\x67\xe6\xf6\x8f\x3b\xd8\xf7\x83\xbf\xf4\x95\x18\xff\x1b\x0e\xf6\x1b\x61\xbf\xc7\x64\xbf\x4a\x61\x7f\xb3\x47\x6d\x3f\x49\x7f\x4e\x53\xbc\xd7\x73\xb2\xbf\xc9\xa3\xb6\x3f\x01\xfb\x13\x26\xfb\xeb\x15\xf6\xf7\x3a\xd8\x6f\xd4\x8f\x52\x1b\xdc\xed\xef\x71\xb0\x5f\x87\x89\x1f\x33\xd9\xdf\xa0\xb0\xff\x2d\x07\xff\x37\x36\x50\x99\xac\x72\xb7\x7f\x9f\x83\xff\xa7\x60\xdf\xec\xff\x1a\x85\xfd\x8b\x0e\xeb\x6f\x6a\x07\x95\xf3\xc2\xdd\xfe\x05\x87\xf5\x27\x9e\xa3\xa2\xce\x64\xff\x4e\x85\xfd\x33\x0e\xf6\xfb\xf0\xef\x15\xf0\x7b\x18\x6e\xff\x94\x83\xfd\x3a\xd8\x6f\x34\xd9\xdf\xa4\xb0\xff\xb9\x83\xfd\x25\x7c\xc7\xca\xef\x45\xb8\xfd\xcf\x1c\xec\x77\x29\xec\x07\x14\xf6\xff\xca\x4b\xf6\x79\x0e\x6e\xc7\x01\x8c\x7f\xf7\xc4\xf3\xe7\x57\x0e\xfa\x3d\xbb\xcb\xd3\x8f\x6b\x6a\xfd\xe1\xd6\xf2\xf4\x77\x3b\xe8\x4f\x3c\x52\x9e\xfe\x2f\x3c\x6a\xfd\xd9\x47\xcb\xd3\xff\x47\x87\xf1\x5f\x7c\xac\x3c\xfd\x3b\x1d\xf4\x17\xf6\x94\xa7\xff\xef\x0e\xfa\xcb\xdf\x2e\x4f\x7f\x9b\x83\xbe\xff\xf1\xf2\xf4\xdb\x84\x5a\xbf\x6e\x6f\x79\xfa\xcf\x39\xcc\x5f\xe8\x89\xf2\xf4\xbf\xe9\xa0\xdf\xf5\x64\x79\xfa\xfb\x1c\xe6\xbf\xef\x29\x75\x7d\xce\x3f\x52\x0e\xf6\x07\x1d\xf4\xb9\xdc\x03\xfb\xfc\x7a\x32\x09\xfd\x45\x86\xf3\xf5\xff\xbb\x0e\xf9\x7f\x0c\xeb\x5f\xbf\x27\x29\xac\xff\x07\x14\xeb\x3f\xe5\xb1\xdb\x2e\xfc\xba\xf0\xef\x32\x27\x4d\xe7\xfa\xbd\x26\x7d\xfd\xa6\xe9\x7f\x03\x00\x00\xff\xff\xb7\x62\xa3\xb2\xd8\x60\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 24792, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

