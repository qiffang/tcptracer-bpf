// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x6f\x6c\x54\x57\x76\xbf\x6f\xec\xc1\x63\xb3\xc4\x4e\xe8\x24\x66\xd2\x6c\x9d\x4d\xd8\x58\x6e\x4a\x6c\x63\x60\x70\x42\x6a\xc8\x9f\xf5\xba\x24\x38\x84\x49\x5c\x56\xd1\x30\x3b\x8c\xf1\x60\x03\x83\x67\x00\x3f\x0f\xed\x9a\xfc\x59\x51\xef\x7e\x30\x9b\x54\xb2\x52\xd4\x7a\x8c\xb3\xf1\x6e\xb7\x95\xdb\xee\x16\xba\x8d\x6a\x4a\xa3\x95\x55\x6d\x25\x94\xa6\xad\x1b\xa1\xca\x1f\xd2\xc8\xdd\x46\xad\xb5\x45\xd4\x8a\x50\xa6\x9a\x7b\x7e\x6f\xde\x7b\xe7\xdd\xf7\x66\x0c\xec\xf6\x8b\x47\x4a\x2e\xe7\xf7\xee\xb9\xe7\xde\x73\xcf\x3d\xf7\x77\xef\x7b\xf0\x8d\x67\x76\x3f\xeb\xd3\x34\x61\xfc\x34\xf1\xbf\xc2\x94\xcc\x5f\xc3\x8b\xe6\x9f\x3b\xf0\xff\x2f\x0b\x4d\xcc\xde\x4b\xd8\x1b\x42\x88\xbb\x84\x10\xd9\x9a\xa5\x7c\x41\xd6\x63\x29\x89\x67\x43\xcb\x52\x9e\x9d\xa4\x7a\x55\x3e\x21\x96\xf2\xf9\xfc\xec\x05\xc8\x15\x42\x2c\xe7\xf3\xf9\x7a\x66\xf4\x62\xa5\xd9\xae\xaf\x20\x03\xff\x7d\x94\xfa\x7d\xdd\xcc\x6e\xa7\xb4\x73\x11\xed\x64\x43\x1d\x0e\xbb\x9d\x0a\x3b\x6f\xc8\x31\x0b\x11\x14\x77\xc9\x27\xfa\x1a\xc2\xcb\xd1\xab\x10\x42\x1c\xaa\x12\xa2\x41\x08\x71\x0a\x65\xa4\xca\xaf\x71\xfd\x0e\x0f\xbb\xb3\x55\x24\x07\xab\x3e\xa7\x71\x1d\x87\xac\xdd\x24\x39\x87\x71\xf9\x30\xae\xa6\x66\xf2\x6f\x1a\xf5\x2a\x5e\x90\xfd\x88\x54\xdc\x90\xed\xe9\x83\x01\x89\xbf\x72\xcf\x75\xf2\x63\x35\xf4\xde\x5e\xcc\x53\xb9\x80\x72\x1e\xe5\x55\x94\x73\x28\x2f\xa3\xbc\x84\x72\x06\xe5\x34\xca\x09\x94\xe3\x28\xc7\x50\x9e\x45\x39\x82\x72\xa8\xd8\x6f\x9f\xec\x77\x1f\xe1\xa1\x14\xf5\xff\x78\x1d\xe6\x89\xea\xe9\x83\xf5\x18\x5f\x23\xd5\x6b\x1a\x01\xde\x00\xbc\x01\x38\xd9\xd1\x53\x8d\x84\xd7\x90\x7d\xfd\x44\x33\xc9\xfb\xa9\x5f\x7a\x26\x4c\xfe\x1b\xa2\x68\xcd\x8e\xa2\xff\x5d\xd4\x7f\x7d\xa8\x93\x9e\x0f\x76\xa3\x7d\x8c\x77\x74\xc6\xe6\x87\xd8\x60\x46\x3e\x8f\x37\x5d\x83\x3c\x04\x99\xfc\x98\x1c\x3c\x2d\xe5\xfe\xa6\x8f\x21\xff\x2e\xe4\x4f\x50\x3f\x85\xfa\xf3\x78\x3e\x82\xe7\x8b\x78\x7e\x50\xca\x87\x7c\x14\x3f\x31\xfd\x80\x94\xf7\x7c\x87\xe6\x2d\xa6\xf7\x51\x99\x1e\xa0\x7a\x15\x54\x6f\xcf\x9b\x98\xd7\x76\xcc\x5f\x13\xcd\x5f\x42\x8b\x49\x7f\x07\xb5\xd3\x88\xa3\xef\x50\x7c\x6b\x9a\xc4\xfd\xe2\xcf\x28\x2e\x10\x8f\xfd\xa1\xbd\x52\xaf\xf6\x9b\x24\xcf\xe6\xa8\xac\xd2\x84\xd8\x9b\xcf\xe7\x8d\xf9\x9b\x8d\x9b\x71\x5b\x58\x9a\xc9\x1c\xe9\xf5\x87\x68\x1c\x7e\xf1\x87\x18\x67\x4f\x9e\xca\x9b\xf4\xbc\x69\x1f\xca\x1b\xe8\x67\x1f\x9e\x2f\x23\x0e\x68\xde\x8d\xf6\x6b\xd7\x3b\xfb\xd1\x83\x7e\x54\x5a\xec\xeb\xc7\x1b\x4a\xea\xdd\x54\xea\x35\x96\xd4\xdb\x67\x19\xb7\xa9\xd7\x5c\x52\xef\x86\x52\x8f\xe2\xb0\xf6\x5e\x67\xfd\x3e\xd4\x0f\x28\xfc\xab\x1f\xa7\xb8\xd5\x2f\x90\xbf\x54\xf6\x96\x15\xe3\x8b\x4d\xc1\xff\x5d\x94\x27\x62\x17\x68\x1e\xe2\xed\x6d\x14\x7f\x93\xc6\x7c\x84\x49\xce\xdd\xc0\x3c\xb6\x53\xfd\x77\x68\x5e\xe2\xfb\x9f\x90\x65\xb0\xb2\xdf\x16\x77\xa7\x50\x06\x2b\x28\x2e\x5f\xf6\x09\x91\xcf\x0b\x11\xf4\xf5\x92\xac\x41\xd6\x28\xae\x8d\xfc\x95\x0d\xf5\xb1\xfc\x3c\x64\xcb\x07\xd6\x71\xa5\x30\xae\x3a\x8c\xab\x8e\xe5\xd3\x66\xb6\x7f\xf4\x29\xf2\xab\x5f\xec\x95\x65\x50\x7b\x44\xe6\xc7\xa0\xb6\x43\xfa\xa7\xb0\x0e\xfc\xf2\x39\xad\x7b\xa3\x3f\xf1\xd0\x3e\xf4\x87\xfc\x57\xfb\xac\x7b\x1c\x7a\xcf\x57\x8f\xeb\x7c\xed\x53\xcc\xd7\x21\x01\xbf\xa2\x2c\x8c\xe3\xe7\xf9\x7c\xde\x18\xc7\x2b\x75\x2d\xc5\x7e\x6a\xb2\x7f\x97\xb1\xde\x9a\x59\xff\x69\x9e\xf5\x1c\xe5\x4f\x55\xbc\x59\xd7\x03\xef\x7f\x2c\x87\x38\x09\x5d\x43\xfb\x0f\xdb\xda\xef\x0f\x51\x9c\xd4\xae\x71\xb6\x7b\xc3\x33\x4f\x18\xf1\xf5\x31\xda\xdd\xc0\xfa\x8d\x3c\x90\x6b\x70\xed\xf7\xb2\x67\xbf\x11\xaf\xa1\x05\xb4\xbf\x8e\xf5\xbb\x97\xda\x7d\xc9\xd9\x6e\xaf\x67\xbf\x7b\xd1\xef\x4f\xd0\x2e\x6d\xc0\xb1\xdc\x3e\xd8\x9b\x77\xf0\x8b\x72\xe2\xb2\x14\xaf\xf9\x7f\xe3\x53\xf5\x9c\x4f\x75\xb3\xf5\xda\xe9\xb0\xdb\xed\xc5\x6b\x10\x27\xc1\x35\x14\xca\xe5\xe8\x15\xd6\xa9\xde\x2b\x1c\xf5\xbd\x78\x9b\xc9\x9f\x7e\x4e\xe3\x28\xf2\xa7\x25\x92\x27\xf9\x38\x1a\xf2\xf6\x7a\x11\xe2\x4f\xda\xcf\x88\x3f\x1d\x07\x7f\x7a\x70\x51\xd8\xf5\xc0\x97\x42\xd8\x6f\x43\xe0\x4b\x58\x8f\xd9\x10\xf8\x43\x08\xfc\x21\x04\xbe\x11\x02\x5f\x0a\x81\x2f\x85\xc0\x97\x42\xe0\x4b\x21\xf0\x25\x96\x0f\x8b\xf9\xb2\x02\xfc\xa9\xbd\x07\xfb\xe7\x01\xf0\x22\xe2\x4f\x7a\x1a\xbc\xa9\x3d\x65\xdb\x5f\xf5\x34\xed\x8f\x7a\x06\x3c\xa9\x0b\x76\xda\xc1\xb7\xd2\xcd\x78\x1e\xc6\x73\xf4\xab\x1d\xfc\x2a\x8d\x7c\x96\xe9\xc4\x73\x8c\xa3\x1d\xfc\x2a\x0d\xde\xd4\x3e\x6d\x1b\x77\x2c\x03\xbe\xd4\xf5\x53\xc8\xe0\x4b\x5d\xe4\xb7\x64\x06\x7c\xa9\xeb\x43\xc8\xe0\x4b\x5d\xff\x8c\xfa\xe0\x4b\x5d\x73\x78\x0e\xbe\xd4\x35\x8f\xe7\xe0\x41\x95\xe0\x4b\x27\x68\x1f\xda\xb3\x0f\xf3\xd4\x05\xde\x96\x21\x1e\x15\x3b\x01\x7e\xe5\x07\x6f\x7a\x06\xf5\xf6\x1b\xf3\x15\x46\x49\xfb\x65\xc4\xf7\x3d\x51\x08\xdd\xd9\x77\x11\x7f\x55\x42\x5c\xca\xe7\xf3\xb5\x5b\x11\x97\x96\xfc\xd1\x6c\xd9\xa7\x1c\xfb\x41\x0e\xed\xde\x47\xf1\xa4\xe7\x9a\x21\xa3\x1d\x4b\x7c\x37\xb0\xf5\xdb\xa3\xdc\xcf\xde\xa2\x71\x04\xb0\x5f\xa0\x8c\x04\xde\x64\x71\x0a\x3b\x88\xf3\x6c\x68\x09\xe5\x22\xf2\xd9\x67\x28\x97\x81\x2f\x20\x9f\x61\xff\x38\x4e\xf3\xca\x79\x4e\xa1\x5f\x75\x2e\xe3\x0f\xd8\xf6\x41\x77\xfd\x7a\xa6\xdf\xb0\x02\x7d\xab\xde\xd2\x0a\xed\x06\x98\xfe\xa2\x52\xbf\x34\x2f\xfc\xec\x16\x79\xe1\xf2\x0a\x79\xe1\x42\x59\x3c\x63\xc1\x95\x67\x28\x79\xef\xf7\x10\x17\x6f\x53\x1e\xd1\xbf\x8b\xf8\x38\x4c\xf9\x64\x36\x46\xfa\x7b\xce\x51\xa9\xbf\x8b\xb8\x19\x46\x3e\x99\xc6\xf9\x71\x94\xf2\x4c\x72\x0a\x71\xd4\x35\x04\x5e\xb9\x0c\x5e\x39\xcc\x78\xe7\x69\xe2\x91\xda\x93\xd4\xcf\x33\xb0\x53\xcc\xbf\x8f\x13\xbe\x93\x64\x93\x3f\x92\x7f\x66\x1f\xe4\xf8\x16\x29\x67\xbb\x02\xc8\x47\x75\xc8\x7b\xf5\x2c\xcf\x77\xd8\xd6\xb7\x9e\xeb\xb6\xad\x73\xab\xbf\xc2\x0a\xbe\x19\xa9\xa6\x0d\xcc\xf0\xcb\x21\x0d\xeb\x0e\x65\xbd\xa4\x03\x26\x4f\x7b\xe0\x41\xda\x88\x22\x55\x1b\x6c\xe3\x2c\xa5\xf7\xca\x83\x34\x81\xa7\xd6\xd0\xf3\xf8\x61\x9a\x17\x63\x7d\xc7\x47\x1f\x46\xff\x69\xbc\xd7\x34\xea\x5f\x7f\xa8\x11\x78\x3d\xc3\x9b\x80\xd7\x61\x5d\x3f\xea\xd8\xb7\x79\xbe\x69\x56\xe6\x1b\x8c\xdf\xa2\xd7\x53\x86\xde\x4a\xf8\x4d\x40\xf2\x8c\x30\x9b\x37\xca\xf3\xfa\x21\xca\xeb\x7a\x5f\xca\xd1\x8f\x79\x2f\x3e\x80\xfb\x8e\x60\xf5\x03\xa4\x8f\x78\x8e\x68\xf7\xcb\x7d\x7e\xf6\xb8\x7a\x5e\x0a\xe7\x82\x2a\x59\xef\x5e\xd9\x0e\x8f\xa3\x7e\xec\x6f\xe5\xde\xeb\x04\xc1\x17\x75\x3c\x0f\x6a\xeb\xa4\xfd\x3b\xdf\xee\x28\xb5\xcb\xfc\xac\x6b\xb4\x6f\xcf\xbe\x46\xb2\x2a\x4f\xcc\x28\xf2\x52\x32\x47\xfd\x89\x68\x3f\xcb\xfb\x6c\x3c\x7d\x06\xf1\xb4\x84\x7e\x2f\xa0\xbc\x99\xb7\x8e\x27\x8e\x7d\x46\x3f\x57\x5f\xb6\x7d\x5b\x9e\x3a\xd7\x50\x52\x6f\x49\xa9\xd7\x58\x52\x6f\x41\x95\x87\xcf\x35\x97\xd4\xbb\xa9\xd4\x43\xfe\xae\x77\xd6\xef\xb0\xe6\xef\xd7\xcc\xf9\x23\x3d\x23\x7f\x77\xb8\xe6\xef\x45\xe5\xb9\x1e\xfe\xef\x1a\x47\x7e\x5d\x42\x7e\x3d\x8f\xfc\x8b\xf9\x68\x22\x9e\x96\xc4\x79\xae\x3f\x34\x49\xf5\xdf\xa1\x79\x89\xef\x9f\xa2\x7c\x5c\xf9\x57\xb2\x74\x9e\xeb\xff\x52\xe2\xe6\xb9\xfe\x87\x24\x17\xf3\xef\x9f\x93\x9e\xe3\xde\x93\xd6\x8f\x5f\xb4\x0a\x1e\xcf\xe3\x9e\xf1\x4c\xfc\xf1\x22\x78\x7c\x76\x18\x7c\x7a\x18\xfc\x6c\x78\xc6\x91\xaf\x8d\xb8\x91\x7c\xa2\xc2\xee\xdf\x37\x64\x1f\x0a\x79\x85\xfc\xab\x5f\x08\x2b\xc7\x99\x6d\x37\xef\x8b\x35\x19\xb7\xb4\x3f\xc4\x72\x3f\x44\x1c\xef\x83\x3c\x0e\xb9\x0f\xf2\x79\xc8\x03\xf0\xf3\x04\xcb\xbf\xd8\x1f\x73\x93\x0c\x1f\x84\xfe\x14\xf4\x33\x54\x0e\x0f\xa1\x3c\x8d\xbc\x6d\x9c\x27\xc0\xf3\x73\x06\x4f\xa5\x7d\x7b\x76\x0a\x7e\xa8\xa4\x38\x33\xf6\xa7\x7a\x9f\xdd\xbf\x17\xfd\x74\x4f\x5f\xf0\xc7\x86\x32\xe7\xa3\x42\xfa\xee\x24\xd9\xbd\xed\xfc\x71\x24\x5f\xa3\xdc\x8f\xc7\x6f\x8d\x97\x9e\xeb\x56\xf6\x47\xc5\x4b\x3b\x54\xfc\xce\x43\x9f\xf3\xd2\xf1\x15\xe8\x97\xe4\xa5\x1e\x76\xcb\xe2\xa5\x65\xe4\x35\x25\x2f\x2d\x23\xaf\x29\x79\xa9\x47\x5e\x5b\x28\x2b\xaf\xad\x90\x97\xe6\x3a\x6c\xe7\x47\xfd\x1d\xc4\x07\xce\x67\x7b\x82\x02\xed\x22\x5e\xda\x69\x7d\xe8\x53\xe0\xa3\xc6\x39\x71\x12\xf1\xd3\x84\x73\x26\xee\x85\xfa\x43\x1f\xd0\xba\x9b\x00\x1f\xad\xa1\x73\x67\xd0\xbf\x81\xda\x6f\xa3\xf6\x83\x95\xf7\xb1\xbc\x17\x64\x79\x6f\xbd\x4b\xde\x5b\x23\xf3\x9e\x75\x7d\xcd\x78\xae\xaf\x1a\xc7\x7e\xef\x56\x9f\xf2\x63\x25\xcb\x8f\x38\x6f\x0f\xe3\x3c\x3e\x3c\xee\xc8\x8f\xe3\xbf\xd0\xfc\x78\xde\x96\x1f\x75\xac\x77\x7d\x12\x79\xaa\xc9\x7e\x7f\x61\xe4\x33\x7d\x12\xf7\x25\x4d\xf6\xfb\x8e\x64\xee\x2a\xcb\x93\x67\x81\x7f\xc0\xf0\x51\xd8\xff\x10\xf6\xbf\x8d\xbc\x39\x86\xf2\x2d\xd8\x9b\x66\xf9\x73\xe2\x96\xf3\x67\x8f\x25\x7f\xfa\xc5\xdf\x91\x3e\xf8\x2b\xe7\xab\xe6\xbd\x59\x73\x51\x96\xeb\x24\x80\xf8\x4d\xae\x90\xc7\x16\xef\xb5\x1e\x25\x7d\xf0\xd6\x88\xd6\x24\xe3\x28\x7b\x98\xf8\xff\x2c\xde\xdb\x5c\x84\x9d\xec\x28\xf9\x39\x3e\x4a\x7e\x32\xce\x99\xb3\x78\x5f\xa4\x5a\x97\x73\xca\xf3\xb0\xb1\x9e\xe7\x5c\xd7\xf3\x87\x8a\xf5\x9c\x1d\xa5\x78\xea\x1f\x9d\x70\xc4\x79\x78\x45\xbc\xb6\x96\xf8\x7a\x1f\xfc\xf7\xdd\x46\x76\x4e\x80\x9d\xd0\xed\xda\x79\xd1\x9b\x3f\x7b\xf8\x6d\x42\xb9\xff\xa1\x3f\xac\xdf\x11\x6d\x91\xf1\xe9\xb1\x12\x7c\x3a\x6c\xe7\xd3\xc6\x7b\x32\x8f\xfe\x8c\x79\xbd\x27\xf3\xd0\x53\xf2\x69\xe3\x3e\xc4\x43\x4f\xc9\xa7\x8d\xfb\x10\x0f\x3d\x25\x9f\x36\xee\x43\x36\x38\xeb\x87\xad\xfb\xce\x9b\xe6\x7c\xda\xe3\x34\xbc\x42\x3e\x0d\xff\xe3\x5e\xd3\xe4\xd3\x53\x8c\x4f\x4f\x33\x3e\xfd\x7d\xc6\xa7\x7f\x00\x3e\x4d\x0b\xd6\xc9\xa7\xe9\x40\x6c\xee\x2b\x14\x7f\xc6\xbe\x12\xd1\xae\x50\x7f\x2d\xf1\x5b\x88\x2b\xbf\xf8\xd1\x1d\x89\xc3\x88\x36\xc5\x78\x98\x71\xdf\x39\x76\x6b\x3c\xcc\xb8\x67\x63\xfd\x51\xf1\xb0\xb0\xd7\x3d\x9d\x42\x9f\xf3\xb0\xb1\x15\xe8\x97\x7d\x3f\xa8\xb0\xbb\xa2\xfb\x41\x0f\xbb\x9e\xf7\x83\x1e\x7a\x9e\xf7\x83\x8a\xf5\xb0\x50\xd6\x7a\x58\x21\x0f\x9b\x42\x5c\x18\xdf\x47\x5c\x30\xde\x07\x4c\x63\xff\x46\x9c\x34\x61\xbf\xcf\x81\x7f\xe1\xbd\x47\x72\x02\x71\x53\x43\xfb\x7d\x12\xef\x91\xfb\xf7\x5f\xa1\xf5\xf2\x2e\xf8\xd7\xf0\xfb\x94\x1f\xb7\x51\x7f\xf6\x7c\x85\xca\x60\xd5\xd7\xa8\x9f\xb8\x1f\xdf\xf3\x88\x81\xf7\xc8\xf2\x65\xdc\x9a\x05\x05\xbd\xc8\x7b\xd9\x0f\xd9\x4f\x17\xff\x91\x4a\xbf\x2c\xf9\xfa\xab\x97\xcb\xcf\x72\x4f\xf7\x14\xdd\x6b\x45\x7c\x59\xaa\x5f\xf2\x7e\xee\x64\xd1\xbf\x7e\xcb\x7d\x15\xbf\x87\xcf\x8e\x76\x14\xf7\xa7\x0a\xb9\x5e\x3a\xe1\x27\xe2\x03\x46\xfb\xf1\xd0\x6e\xb6\x8f\xe1\xbd\x8e\xc1\xaf\x26\x29\x9f\xc4\xf1\x9e\x27\x36\xf9\x1e\xe4\x83\xc8\x4b\xe4\xdf\x6b\xb8\xaf\xec\xc7\xfb\x9e\xe4\xe4\x15\x86\x1f\x86\xfe\xfb\xd0\x1f\xc0\x3a\x4e\xa1\xcc\x38\x78\x63\xb7\xe2\x1e\x34\x99\x3b\x8c\xf6\x71\xfe\xbd\x40\xfd\x88\x4d\x1d\x40\xde\x23\x42\x34\x4b\xd7\xb2\xc5\xf7\x2c\xa7\x50\x06\xfd\xf7\xd0\xf3\x8d\x82\xcd\x5b\x2d\xe1\x41\x8e\x7f\x81\x70\x0b\x4f\x0b\x7b\xf0\x34\xe3\x1c\xc2\xcf\xbb\xa5\xfa\x1d\xc7\xfb\xae\x78\xfb\x5b\xcc\x6f\xe3\x8c\x77\xbe\x0d\xde\x69\xf8\xef\xbc\x83\x6f\x8c\x79\xf2\xfd\xeb\x9f\xf3\xfa\x13\x9e\xf5\xff\xeb\xf3\x5f\x6e\xbc\x4d\xb0\x78\x9b\x62\xf1\x36\xed\x12\x6f\xdf\x77\x89\xb7\x1f\xdc\x56\xbc\xdd\xee\xbc\xfb\xc5\x4f\x7e\xa9\xfe\xd3\x27\x8d\x7c\x89\x73\x47\x3b\xbe\x73\x33\xde\xd3\x4e\x22\x5f\x5e\xc0\xf9\x08\xef\x5f\x8d\x73\x92\x73\x3d\x8f\xb8\xac\xe7\x57\xd9\x7a\x7e\x1d\x7e\x3d\x8b\xf2\xdb\xbf\x30\xff\xf6\x48\x5f\xfe\x23\xf9\xa1\xf8\x1d\xa2\xc1\x0f\xe0\xb7\x0d\xf6\xef\x07\x8c\xf7\xff\xfc\x1c\x14\xac\xa6\x17\x3d\xd6\xf5\xa0\xfa\x5e\xc1\x79\x0e\x6a\x97\xa5\x79\x0e\x0a\xd3\x39\xc8\x98\x47\xb4\xdf\x3f\x8a\xef\x4d\x46\xaf\x83\xaf\x94\xde\x7f\xaf\xaf\x60\xdf\xae\xc2\xfb\xf8\x52\xdf\x7d\x65\x47\xc1\x0f\x47\xf1\xfd\x46\x19\xe7\x30\x35\xef\x30\xf6\xf3\x45\xd7\xfd\x5c\xc5\xdf\xb3\xa3\x63\xf0\x43\x77\xd9\xf9\xaa\xbc\xf7\x16\x68\x37\x74\xbb\xed\x7e\xf5\x96\xcf\x5d\x32\xae\x03\x78\xbf\xe4\xe0\xbd\xdd\xe0\xbd\xff\x91\xf7\xd9\xf2\x00\xbe\x13\xc5\x7d\x13\xdf\xf7\xf9\xfd\x64\x1c\xe7\x57\xf3\xbc\xe6\xfd\x9d\x47\x0c\xfc\x28\xde\x84\xf5\x89\xef\x43\xe2\x21\xfa\x0e\xc2\x7c\xbf\x37\x85\x78\x28\x7d\x9e\xbb\xe4\x71\x9e\x53\xf1\xc2\xf7\xac\xdf\x49\x31\x5e\x68\x7e\x87\x05\x7e\x96\xbb\xce\xf6\xb9\x2b\x8e\xfc\x31\xad\xc8\x1f\x31\xdc\x47\x07\xb5\x39\xec\x8b\xef\x29\xfd\x19\xd4\xde\x87\x1d\xb2\x67\xde\xa3\xfd\x2d\xf0\x2b\x0c\xff\x1b\xb2\x6f\xc9\x4f\x85\x78\x32\xbe\x1f\xe4\xf9\xc9\x78\x7f\xe2\x17\xdf\xbc\xc3\x71\xf3\x27\xf2\xbc\x74\xe7\xe2\xe6\xd6\xbe\x1b\x32\xe3\xe9\x1a\xe2\xc8\x38\x87\x7d\xec\x12\x4f\xa5\xcf\x45\xea\x7b\x9e\xf2\xcf\x45\x57\x57\xa8\xcf\xcf\x83\x97\x3c\xf4\x8d\x78\xae\xaa\x76\x9e\x03\x2f\x7b\x9c\x77\xcc\xb8\x9e\x77\x89\xeb\x8f\xca\x8a\x6b\xf3\x9e\x92\xe6\x23\xe2\xc3\xfb\x6f\x8c\xa7\xf4\xb9\xa2\x1a\x71\x49\xf3\xac\x4f\xd1\x3c\x47\x2a\x89\x18\xbb\xf1\x63\xca\x02\x96\xf3\x86\xff\xb1\xe2\xf8\x28\xfe\xc0\x33\xde\x45\x9c\x0d\xf7\x14\xe3\xcb\x27\xe3\x01\x7c\xf6\xf0\x41\xc6\x53\xec\xf7\xb0\x26\x6f\x18\x82\x8c\x7b\xd4\xa6\xd3\xe0\x1b\xe4\x3f\x93\x7f\x7c\x04\xf9\x55\x16\x8f\xa5\x79\x47\x9f\x32\x6f\x0c\x21\x6f\xec\x44\xde\x38\xed\x92\x37\x76\x60\x1e\x47\x58\x7e\x68\x07\xfe\x2a\xc3\xb7\x39\xf2\x46\xb7\x47\xde\x98\xc5\xdf\x9b\x70\xf2\xc6\x4d\xb2\xfe\x1e\x7c\x6f\x12\xd4\xe8\xbb\x89\x3d\x4f\x41\xae\x68\x82\xfd\x79\x66\xff\x11\xe0\x1f\x31\xfc\xe1\x5b\xca\x67\x26\xdf\xfa\x94\xf4\x1d\xdf\x83\x12\xef\x32\xbe\x17\x8e\xd7\x80\xe7\x14\xbf\x0f\x5d\x74\xec\xcb\xd7\x3d\xf7\xe5\x1a\x29\xc7\x8a\xfb\x32\x11\x29\xce\xcf\xac\xdf\x7d\x2c\xde\x91\xef\x5a\x9d\xdf\xb1\x96\xc7\x03\x1f\x56\xf6\xcf\xed\x3c\xc5\xf9\xa7\xb9\xae\x68\x9d\x3b\xcf\x05\x97\x8b\xeb\xa8\xd2\xb2\x8f\x9b\xeb\xca\x7e\x5f\x66\xdc\x8f\xf1\xef\x43\xcd\xef\xa9\xf1\x1d\x24\x78\xab\x71\xdf\xab\xca\xab\x6e\x3c\xfd\xd2\x2d\x9c\x83\x1c\xfe\x6f\x54\xcf\x83\xf1\xbd\x4c\xf2\x0c\x7d\x4f\x1a\xd1\x36\x16\xf7\xc5\x80\xc5\xef\xe6\xf8\x0d\xde\xaf\xf6\xc3\xa9\x6a\xc4\xe5\xdb\xb4\x6f\x99\xfe\x26\x3f\xf2\xf7\x67\xd9\x61\xf8\xeb\x4c\xa5\xcd\x3f\xb1\x33\x86\xbf\x28\xbe\x93\x67\xee\x92\xb2\x71\x2f\x99\x3c\x43\xf7\x04\x66\x9e\xff\xac\x38\x4f\x7e\xeb\xf7\xd9\x8a\x7b\x33\x37\x3f\xcf\x79\xf9\xd9\x92\x37\xc2\x1e\x7e\xae\xb4\xfc\x27\x2a\xc5\xea\x0f\xbf\x55\xbf\xa8\x7f\xab\x7e\x51\xff\x34\xe4\x1f\x99\xb6\x57\xfd\x52\xfc\xad\xfa\x45\xfd\xd3\x90\xcf\x25\x9f\x5e\xf5\x4b\xf1\x57\xf0\x4b\xe3\xaa\x5f\x1c\x3f\x63\x1d\xad\xe6\x5d\xfb\x4f\x5b\xdd\x8f\x94\x3f\x23\x5e\xce\xe2\xcf\xab\x3f\xfa\x7d\xa5\x7b\xb7\xf8\x3c\x9f\xcf\xd7\x41\xd6\x86\xf7\x8a\xc0\xe9\xb5\xda\xfd\xd6\x7c\x2c\x84\x18\x42\x59\xc0\x1e\xc5\x9f\xe7\x03\x26\xd6\xa1\xa8\x87\xbf\xd2\x25\xfa\x2c\xf5\xf0\x59\x8d\xb8\x5c\x63\x62\xa7\x8d\xce\xac\x33\xb1\x31\x40\xa9\x6a\x13\x03\xd5\x17\x73\x16\x1b\x97\xf0\xe7\x11\x4c\xea\xaf\x08\x21\x7e\x6a\xd8\x2d\x63\xa2\x8f\xcb\x35\xe2\x17\x8d\x6b\xec\x78\x25\xf0\x40\x95\x1d\x7f\xad\x82\xf0\xcb\x0c\x7f\x06\x78\x47\x85\x1d\xff\x7b\x1f\xe1\x7d\xac\xfe\x1f\x03\x6f\x08\xd8\xf1\x13\xc0\x3b\x59\x7f\x62\xe8\xcf\x10\xab\xbf\x13\xf8\x59\x86\xdf\x0f\x7c\x9c\xf5\xe7\x5b\x68\xff\x12\xab\xff\x0a\xf0\x39\x86\x67\xa5\x7e\xb5\xe8\x64\xfd\xbf\xe2\x23\x7c\x84\xe1\x17\x80\xd7\xb3\x76\x8e\x00\xef\x64\x38\x1d\x1b\xab\x45\x0f\xc3\x5f\x47\xfd\x69\xd6\xff\x9b\x52\x5e\x2b\x16\x19\xbe\x03\xf8\x90\xdf\x8e\xff\x81\x8f\xf0\x1e\x16\x0b\x09\xe0\xd3\xac\x7e\x1c\xed\xcc\xb3\xfe\xfc\x06\xf0\x40\xb5\x1d\xff\x77\xe0\xd3\x76\x58\xdc\x0b\x9c\x27\x9b\xbf\x80\x5d\x1e\x9b\x49\xe9\x87\x75\xa2\x87\xe5\xec\xaf\x02\xaf\xaf\xb1\xe3\x0f\x01\xef\x63\x78\xba\x82\xf0\x79\xd6\xfe\x16\xe0\x29\xd6\xfe\x6f\xa3\x9d\x30\x6b\xe7\x3a\xea\xcf\xb1\xf9\xdd\x08\x7c\x99\xe1\x2f\xa0\x9d\x39\xe6\x9f\xed\xc0\xa7\xd7\xda\xf1\xf5\xc0\xc7\x19\xfe\xa9\x4b\xff\xff\xcd\xe8\x3f\xc3\xf7\x01\x1f\x61\x78\x2d\xf0\x45\x86\xf7\x4b\xbc\x56\x8c\x33\x3f\xbc\xe9\x23\xbc\x81\x8d\x4b\xaf\x24\x9c\xaf\xdf\xaf\xa1\x1d\xbe\x5e\x1e\x00\x7e\x95\xe1\x3f\x46\xfb\x0b\x0c\x7f\x0e\xf5\x97\x59\x3f\x7f\x07\xf5\xbb\xd9\x3d\xc6\x4b\xc0\x0f\x30\xfc\x0b\xb2\x9f\x77\x17\xf3\xa1\xf1\x6b\x95\xf8\x7a\x87\xdf\x7e\x5d\xe2\x41\xc7\xba\x10\xf2\xde\xad\xc2\x09\x4a\xdc\xef\x82\x57\xb9\xe0\xd5\x2e\xf8\x5a\x17\x7c\x9d\x0b\x5e\xeb\x82\xdf\xed\x82\xaf\x77\xc1\x83\x0e\xec\x31\x79\x9f\xf4\xa0\x03\x7f\x4e\xde\x4b\x7d\xc9\x81\x4f\xc9\xf7\x22\x21\x07\xfe\x9f\xb2\x9d\xfb\x1d\xf8\x93\xb2\x9d\x5f\x73\xe0\xcf\xc8\xfd\xeb\x8b\x0e\x7c\x40\xd6\x77\x8e\x2b\x20\xdb\x77\xfa\xe7\x4f\x65\x7d\xe7\xb8\xfe\x55\xe2\x4e\x3f\xff\x93\xb4\xeb\x9c\xdf\x23\x12\x77\xce\xe3\x4b\xb2\x1d\xa7\x3f\xab\x64\x7d\xe7\xbc\xfc\xb5\xc4\x9d\x71\xf2\xa2\xc4\x9d\xf1\x30\x26\xfd\x79\x9f\x03\xff\x17\x39\xde\x0d\x0e\xfc\x1f\x64\xfd\x7a\x07\xde\x28\xfb\xd9\xe0\xc0\x7f\x2c\xeb\xff\xaa\x03\xd7\x24\xfe\x80\x03\xef\x34\x9e\x0b\x21\x9e\x12\x74\x57\x68\x95\x53\x4c\x9e\xb1\xc8\x05\xbe\x53\xb7\xc6\x94\x23\x42\x88\xe9\x80\xfd\xb9\xb5\xfd\xa7\x59\xfb\x4f\xb3\xf6\x0b\xf2\x04\x6b\x7f\xac\xc2\x2e\x8b\x80\xdd\x5e\xd8\x22\xbf\xc4\xec\x15\xea\x5f\x65\x72\xa3\x66\x97\x97\x2b\xec\xed\xf5\xf8\x4d\xf9\x85\x02\x7f\xf6\xdb\x9f\x2f\x32\x7b\xf5\xd5\x76\x79\xbc\xc6\x94\xf7\x0a\x81\x7f\xb5\xc5\xb4\xd7\xc1\xec\x4f\x33\x79\xa4\xda\x6e\xbf\xbe\xc6\x6e\xbf\xb3\xc6\x6e\x6f\x68\xad\xbd\xfe\xfc\x17\xec\xf6\x7b\x98\xfd\x39\x66\xaf\xc1\x67\x97\x87\x2a\xed\xed\xcd\x04\xec\x72\x67\xb5\xbd\x7d\xab\xbf\x0b\x6b\x7c\xdc\x22\x3f\x8b\xb3\xbc\x55\x3e\xc0\xe4\x4e\xcd\xde\x7e\xb3\x45\x2e\xac\x21\x23\x92\x0b\xc3\xde\x56\x78\x6e\x91\xc3\x88\x19\x43\xde\x6e\x19\x6f\x41\x6e\x2f\xe4\x17\x8b\xfc\x78\xc1\xbf\x16\xf9\x09\x21\xf0\xaf\x14\x90\xbc\xa3\x30\x1f\x16\xf9\x49\x21\xc4\x7b\x16\xf9\x37\x2d\xf1\x54\x63\x9c\x01\x36\x65\x12\x43\x19\xd1\x3f\x98\xc8\xa4\x06\x8f\x7d\x3d\x11\x8d\x26\x8f\x26\x32\xd1\x78\xba\x3f\x1a\x8b\xc7\x13\xa9\x8c\xd8\x34\x98\x18\x28\x3e\x7e\x8c\x3f\x3d\x12\x4b\xa5\x1f\xeb\x3d\x98\x3c\x9a\xce\xc4\x06\x06\xa2\x83\x09\x5b\x5b\x99\x78\x2a\x7a\x72\x6b\x34\x7e\xec\xe8\xd1\x44\x3c\x23\xfa\xd5\xb0\xdd\x82\xea\xa1\xf2\x09\xb7\xd3\xa6\xb6\xd3\xe6\x65\xa7\xcd\xd5\x8e\xf9\x44\x0e\x31\x13\x4f\x65\x06\x63\xf1\xc4\x60\x34\x9d\x89\x65\x4e\xa4\xf9\xc0\x53\xc9\x83\x69\x11\x3d\x99\x18\x4c\x27\x8f\x1d\xb5\x76\xad\xf7\x60\x14\x75\x8a\xdd\xb2\x40\xf6\x2e\xf1\x07\x0e\xd4\x3a\xb0\x74\xe2\xe8\xc1\x23\xe9\x43\xbc\xe3\x06\x6c\xaf\x9a\x91\xdd\x4e\x38\x2b\x1b\x0f\xac\xd5\xe3\x03\xc7\xd2\x8e\xaa\x04\x46\x07\x92\xf1\xc4\x51\x3c\xdd\x94\xe8\x8b\xf6\x0e\xc6\x8e\x24\xc4\xa6\x74\x66\x30\x13\xfb\xba\xd8\x94\xd6\x8f\x14\xca\xdd\xbb\x76\x6d\x8d\x6e\x2f\x14\x2d\xd1\x56\x59\xb6\x45\x5b\x64\xb9\x19\x65\x0b\xca\xad\xd1\x30\xc1\x61\xd4\x0e\x13\xda\x12\x86\x16\x1e\xb7\xe0\xb9\x81\x6f\xa3\x6a\xad\xdb\xf0\x78\x1b\x1e\x6f\x2b\x4e\x57\x34\x71\x32\x71\x34\x13\x4d\xa6\x4e\x6e\x25\x0c\xf3\x99\x3e\x16\xef\xb7\xa0\x99\x13\xa9\x81\x44\x2a\x79\x90\xa0\xdd\xbb\x76\x6d\x89\x6e\x25\x13\x5b\x61\x02\x68\x2b\x60\x43\x6e\x81\x4c\x65\x0b\xca\xad\xd1\x2d\xf4\x78\x0b\xb4\xb7\x40\x0b\x72\x0b\x1e\x53\xb9\x19\x65\x4b\xa1\x74\x76\xbc\x4d\xd9\xf1\x36\x67\xc7\xdb\x4c\xe5\xcc\x60\xac\xb7\x37\x19\x27\x54\x9a\x6a\xa3\x1e\x40\xda\x8c\xb2\x15\x70\x4b\x1b\x3a\x20\xcb\x6d\xd1\xcd\xa8\xb6\x19\xf3\x01\xb9\x45\x96\xdb\xa3\xad\x85\x22\x4c\xc5\x96\xe8\xe6\x56\xd4\x82\xdc\x62\xe0\x2d\x30\xd2\x82\xe7\x90\x5b\x20\x53\xb9\x35\xda\xda\x4c\x5e\x68\x35\xd2\xe2\x6d\xff\x9e\xf5\x09\x25\x1b\x1e\x7b\x9e\xca\xdf\x63\xe7\x08\x4e\xa7\x35\xfc\xc7\x8e\xf3\xc5\xfb\x12\xfe\xe3\x57\x76\xeb\x34\x6f\xfd\x21\x86\xb3\xe3\x85\xa8\xd6\x84\x92\x85\x77\xff\x16\x95\xc6\xbd\xcf\x46\xbc\x6f\x37\xf4\x0d\x7c\xc9\xa5\xff\xc6\x39\x83\x9f\x93\xb9\xfd\x4f\x85\xda\xfe\x01\xd8\xef\xb6\xd8\xf7\x2b\xec\xbf\xe3\x62\x7f\x0c\x8d\x96\x1a\x7f\xce\xc5\xfe\x8c\x62\xfc\x55\x0a\xfb\x67\x5d\xec\x07\xc0\x3b\xfa\x4a\x8c\xff\x75\x17\xfb\x97\x61\xff\x80\xc5\x7e\xb5\xc2\xfe\xff\xb8\xcc\x7f\xea\x1e\xb4\x53\xe3\x6d\xff\xbf\x5d\xe6\xbf\x61\x37\x95\x63\x16\xfb\x6b\x15\xf6\xbf\xe8\x53\xdb\x6f\x36\xa8\xf3\x3a\x6f\xfb\x21\x9f\x8b\xff\x61\x7f\xc4\x62\x7f\x9d\xc2\xfe\x97\x5d\xfc\xdf\xdc\x44\x65\xaa\xda\xdb\xfe\x97\x5c\xfc\xdf\xfc\x1c\x95\x56\xff\xd7\x2a\xec\x9f\x77\xf1\xff\xc4\x66\x2a\xe7\x84\xb7\xfd\x71\x17\xff\x8f\xc1\x7e\x83\xc5\xfe\xdd\x0a\xfb\xaf\xb9\xd8\xef\xc3\xdf\x7b\xe6\xf7\x1e\xdc\xfe\x37\x5c\xec\xcf\xc0\x7e\xb3\xc5\xfe\x7a\x85\xfd\x9f\xb8\xd8\x5f\xc4\xf7\x70\xfc\x1e\x8b\xdb\xbf\xe2\x62\x7f\xe1\x39\xbb\x9d\x8d\xf2\x36\xc2\x69\xff\x5b\x15\x64\x9f\xe7\xe0\x6e\xfc\xfd\x23\xfe\xdd\x10\xcf\x9f\x73\x2e\xfa\x7d\xe1\xf2\xf4\x3f\xf0\xa9\xf5\x47\xb6\x97\xa7\xff\x47\x2e\xf6\xc7\xdb\xcb\xd3\xff\xc4\xc5\xfe\xcc\xe3\xe5\xe9\xff\xc8\xc5\xfe\xdc\x13\xe5\xe9\xdf\x74\xb1\xbf\xb0\xa3\x3c\xfd\x0e\xa1\xd6\x5f\x7e\xb2\x3c\xfd\xed\x9a\x5a\xbf\xae\xa3\x3c\xfd\x87\x5c\xf4\x1b\x77\x96\xa7\xdf\xec\x32\xfe\x8e\x5d\xea\xfa\x7c\xff\x7f\xde\xc5\xfe\xd3\x2e\xfa\x5c\x7e\x02\xf6\xd9\x75\x9f\xe8\x84\xfe\x02\xc3\xf9\xfa\x0b\xbb\xe4\xdf\x25\xac\x3f\xe3\x7e\xa1\xb0\xfe\x1e\x52\xac\xbf\xe7\x7d\x4e\xdb\x85\x5f\x23\xbe\xab\x6c\xb4\x9c\x87\x77\x5a\xf4\x8d\x1b\x9a\xff\x0b\x00\x00\xff\xff\x15\xa4\x1a\x24\xa0\x5c\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 23712, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

